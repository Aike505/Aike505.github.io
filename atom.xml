<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aike-blog</title>
  
  
  <link href="https://aike505.github.io/atom.xml" rel="self"/>
  
  <link href="https://aike505.github.io/"/>
  <updated>2022-09-06T00:16:34.200Z</updated>
  <id>https://aike505.github.io/</id>
  
  <author>
    <name>Aike</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>启发式算法</title>
    <link href="https://aike505.github.io/2022/09/03/%E5%90%AF%E5%8F%91%E5%BC%8F%E7%AE%97%E6%B3%95/"/>
    <id>https://aike505.github.io/2022/09/03/%E5%90%AF%E5%8F%91%E5%BC%8F%E7%AE%97%E6%B3%95/</id>
    <published>2022-09-03T04:08:22.000Z</published>
    <updated>2022-09-06T00:16:34.200Z</updated>
    
    <content type="html"><![CDATA[<p>暂无更多编辑，点击查看文章……</p><span id="more"></span><!-- 显示公式块 --><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script><script type="text/x-mathjax-config">    MathJax.Hub.Config({ tex2jax: {inlineMath: [['$', '$']]}, messageStyle: "none" });</script><p><strong>启发式算法</strong>（heuristic algorithm)是相对于<a href="https://baike.baidu.com/item/%E6%9C%80%E4%BC%98%E5%8C%96?fromModule=lemma_inlink">最优化</a>算法提出的。一个问题的最优算法求得该问题每个实例的<a href="https://baike.baidu.com/item/%E6%9C%80%E4%BC%98%E8%A7%A3/5208902?fromModule=lemma_inlink">最优解</a>。启发式算法可以这样定义：一个基于直观或经验构造的算法，在可接受的花费（指计算时间和空间）下给出待解决组合优化问题每一个实例的一个<a href="https://baike.baidu.com/item/%E5%8F%AF%E8%A1%8C%E8%A7%A3/962143?fromModule=lemma_inlink">可行解</a>，该可行解与最优解的偏离程度一般不能被预计。现阶段，启发式算法以仿自然体算法为主，主要有<a href="https://baike.baidu.com/item/%E8%9A%81%E7%BE%A4%E7%AE%97%E6%B3%95/9646604?fromModule=lemma_inlink">蚁群算法</a>、<a href="https://baike.baidu.com/item/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%E6%B3%95/10423893?fromModule=lemma_inlink">模拟退火法</a>、<a href="https://baike.baidu.com/item/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/16600562?fromModule=lemma_inlink">神经网络</a>等</p><p><strong>启发式搜索</strong>(Heuristically Search)又称为有信息搜索(Informed Search)，它是利用问题拥有的启发信息来引导搜索，达到减少搜索范围、降低问题复杂度的目的，这种利用启发信息的搜索过程称为启发式搜索。</p><ul><li>1)任何有助于找到问题的最优解，但不能保证找到最优解的方法均是启发式方法;</li><li>2)有助于加速求解过程和找到较优解的方法是启发式方法。</li></ul><h4 id="粒子群优化算法PSO（Particle-Swarm-Optimization）"><a href="#粒子群优化算法PSO（Particle-Swarm-Optimization）" class="headerlink" title="粒子群优化算法PSO（Particle Swarm Optimization）"></a>粒子群优化算法PSO（Particle Swarm Optimization）</h4><h5 id="算法解释"><a href="#算法解释" class="headerlink" title="算法解释"></a>算法解释</h5><p><strong>PSO</strong>中，每个优化问题的解都是搜索空间中的一只鸟。我们称之为“粒子”。所有的粒子都有一个由被优化的函数决定的适应值(fitnessvalue)，每个粒子还有一个速度决定他们飞翔的方向和距离。然后粒子们就追随当前的最优粒子在解空间中搜索。</p><img src="https://cdn.jsdelivr.net/gh/Aike505/ImgHosting/Aike505-PIC/image-20220902222937338.png" alt="粒子群算法图解" style="zoom: 67%;" /><h5 id="核心公式和参数解释"><a href="#核心公式和参数解释" class="headerlink" title="核心公式和参数解释"></a>核心公式和参数解释</h5><img src="https://cdn.jsdelivr.net/gh/Aike505/ImgHosting/Aike505-PIC/image-20220902223137587.png" alt="image-20220902223137587" style="zoom: 67%;" /><p><code>x(d) = x(d-1) + v(d-1)*t</code>（每一步运动的时间 t 一般取1）</p><p>v(d)：第d次迭代时，第i个粒子的速度</p><p>x(d)：第d次迭代时，第i个粒子所在的位置</p><p><code>v(d) = w*v(d-1) + c1*r1*(pbest(d)-x(d)) + c2*r2*(gbest(d)-x(d))</code>(三个部分的和)</p><p>c1：个体学习因子，也称个体加速度因子</p><p>c2：社会学习因子，也称社会加速因子</p><p>r1,r2：[0,1]上随机数    w：称为惯性权重，一般取0.9就行</p><p>pbest：到第d次迭代位置，第i个粒子经过的最好的位置</p><p>gbest：到第d次迭代位置，所有粒子经过的最好的位置</p><p>粒子：优化问题的候选解    位置：候选解所在的位置    速度：候选解移动的速度</p><p>适应度：评价粒子优劣的值，一般设置为目标函数值f(x)</p><p>个体最佳位置：单个粒子迄今为止找到的最佳位置</p><p>群体最佳位置：所有粒子迄今为止找到最佳位置</p><h5 id="算法流程图"><a href="#算法流程图" class="headerlink" title="算法流程图"></a>算法流程图</h5><ol><li>初始化参数：粒子数量，变量个数narvs，c1，c2，w，迭代次数K，最大速度限制vmax(取可行域的10%-20%)，x_lb，x_ub</li><li>初始化粒子：每个粒子初始位置d和初始速度v</li><li>计算适应度：目标函数f(x)计算fit，pbest，gbest</li><li>更新粒子速度和位置：核心公式，v和d是否符合范围</li><li>重新计算粒子的适应度：计算第i个粒子的适应度new_fit</li><li>找到全局最优的粒子：new_pbest，new_gbest</li></ol><img src="https://cdn.jsdelivr.net/gh/Aike505/ImgHosting/Aike505-PIC/image-20220902223325443.png" alt="image-20220902223325443" style="zoom:67%;" /><h5 id="算法改进1：线性递减递减权重LDIW（Linear-Decreasing-Inertia-Weight）"><a href="#算法改进1：线性递减递减权重LDIW（Linear-Decreasing-Inertia-Weight）" class="headerlink" title="算法改进1：线性递减递减权重LDIW（Linear Decreasing Inertia Weight）"></a>算法改进1：线性递减递减权重LDIW（Linear Decreasing Inertia Weight）</h5><p>惯性权重w与迭代次数K有关</p><ul><li><p>较大惯性权重有利于全局搜索</p></li><li><p>较小惯性权重更利于局部搜索</p></li></ul><p>$$<br>w^d  =  w_{start} - (w_{start} - w_{end}) * \frac{d}{k}<br>$$</p><p>w<del>start</del> 一般取0.9，w<del>end</del> 一般取0.4</p><h5 id="算法改进2：自适应惯性权重"><a href="#算法改进2：自适应惯性权重" class="headerlink" title="算法改进2：自适应惯性权重"></a>算法改进2：自适应惯性权重</h5><p>惯性权重w不仅与迭代次数K有关，也与适应度fit有关</p><p><em>1. 最小值问题</em></p><ul><li>适应度越小，说明距离最优解越近，需要局部搜索</li><li>适应度越大，说明距离最优解越远，需要全局搜索</li></ul><p>$$<br>w_i^d =<br>    \begin{cases}<br>        w_{min} + (w_{max} - w_{min}) * \frac{f(x_i^d) - f_{min}^d}{f_{average}^d - f_{min}^d},&amp;f(x_i^d) \leq f_{average}^d\<br>        w_{max},&amp;f(x_i^d) &gt; f_{average}^d<br>    \end{cases}<br>$$</p><p>w<del>max</del>一般取0.9，w<del>min</del>一般取0.4</p><p><em>2. 最大值问题</em></p><ul><li>适应度越大，说明距离最优解越近，需要局部搜索</li><li>适应度越小，说明距离最优解越远，需要全局搜索</li></ul><p>$$<br>w_i^d =<br>    \begin{cases}<br>        w_{min} + (w_{max} - w_{min}) * \frac{f_{max}^d - f(x_i^d)}{f_{max}^d - f_{average}^d},&amp;f(x_i^d) \geq f_{average}^d\<br>        w_i^d = w_{max},&amp;f(x_i^d) &lt; f_{average}^d<br>    \end{cases}<br>$$</p><h5 id="算法改进3：随机惯性权重"><a href="#算法改进3：随机惯性权重" class="headerlink" title="算法改进3：随机惯性权重"></a>算法改进3：随机惯性权重</h5><ul><li>避免迭代前期局部搜索能力的不足</li><li>避免迭代后期全局搜索能力的不足</li></ul><p>$$<br>w = rand()\<br>或\<br>w = μ_{min} + (μ_{max} - μ_{min}) * rand( ) + σ * randn( )<br>$$</p><p> μ<del>min</del>惯性权重最小值0.4，μ<del>max</del>为惯性权重最大值0.9，σ(标准差)一般取0.2~05之间</p><h5 id="算法改进4：压缩（收缩）因子法"><a href="#算法改进4：压缩（收缩）因子法" class="headerlink" title="算法改进4：压缩（收缩）因子法"></a>算法改进4：压缩（收缩）因子法</h5><p>确保PSO算法的收敛性，并可取消对速度的边界限制<br>$$<br>c1 = c2 = 2.05,C = c1 + c2 = 4.1\<br>收缩因子Φ = \frac{2} { |(2-C-\sqrt{C^2-4C})|}<br>$$<br>惯性权重w = 0.9，速度公式更新为：<br>$$<br>v_i^d = Φ*[wv_i^{d-1} + c_1r_1(pbest_i^d - x_i^d) + c_2r_2(gbest^d-x_i^d)]<br>$$</p><h5 id="算法改进5：非对称学习因子"><a href="#算法改进5：非对称学习因子" class="headerlink" title="算法改进5：非对称学习因子"></a>算法改进5：非对称学习因子</h5><p>随着迭代次数增加，使 c1 线性递减，c2 线性递增，从而增强粒子向全局最优点的收敛能力<br>$$<br>c_1^{ini} = 2.5,c_1^{fin} = 0.5,c_2^{ini} = 1,c_2^{fin} = 2.25\<br>c_1^d = c_1^{ini} + (c_1^{fin}-c_1^{ini})*\frac{d}{K};<br>c_2^d = c_2^{ini} + (c_2^{fin}-c_2^{ini})*\frac{d}{K};<br>$$</p><h5 id="优化问题测试函数"><a href="#优化问题测试函数" class="headerlink" title="优化问题测试函数"></a>优化问题测试函数</h5><p>四种常见的测试函数<br>$$<br>函数名&amp;函数表达式&amp;维数&amp;取值范围&amp;理论极值&amp;误差目标\<br>Sphere &amp;f(x)=\sum_{i=1}^{n}x_i^2 &amp;30 &amp;[-100,100]^n &amp;0 &amp;10^{-2}\<br>Rosenbrock &amp;f(x) = \sum_{i=1}^{n-1}[100(x_{i+1}-x_i^2)^2+(x_i-1)^2] &amp;30 &amp;[-30,30]^n &amp;0 &amp;10^{2}\<br>Rastrigin &amp;f(x) = \sum(x_i^2-10cos(2πx_i)=10) &amp;30 &amp;[-5.12,5.12]^n &amp; 0 &amp;10^{2}\<br>Griewank &amp;f(x) = \frac{1}{4000}\sum_{i=1}^{n}x_i^2-\prod_{i=1}^{n}cos(\frac{x_i}{\sqrt{i}})+1 &amp;30 &amp;[-600,600]^n &amp;0 &amp;10^{-1}<br>$$</p><h5 id="算法改进6：自动退出迭代循环"><a href="#算法改进6：自动退出迭代循环" class="headerlink" title="算法改进6：自动退出迭代循环"></a>算法改进6：自动退出迭代循环</h5><p>能极大减小迭代的次数，提高运行速度</p><ol><li>初始化最大迭代次数、计数器Count以及最大计数值max_Count</li><li>定义“函数变化容忍度”tolerance，一般取10^-6</li><li>迭代过程中，每次计算出最佳适应度后，计算和上次最佳适应度变化量</li><li>判断变化量和“函数变化容忍度”相对大小，如果前者小计数器计1，反之计0</li><li>不断重复，有两种可能：<ol><li>此时没有达到最好迭代次数，计数器值超过了最大计数值，跳出循环，搜索结束</li><li>此时已经达到了最大迭代次数，直接跳出循环，搜索结束</li></ol></li></ol><h5 id="Matlab自带的粒子群函数"><a href="#Matlab自带的粒子群函数" class="headerlink" title="Matlab自带的粒子群函数"></a>Matlab自带的粒子群函数</h5><p>Matlab中particleswarm函数采用的是自适应的领域模式</p><p><em>默认求最小值</em></p><ul><li><p>搜索初期使用领域模式lbest</p></li><li><p>搜索后期是使用全局模式gbest</p></li><li><p>自适应调整参数</p><ul><li>适应度开始停滞是，从领域模式转向全局模式</li><li>适应度开始下降，有回复到领域模式</li><li>适应度听哈子次数租后大势，惯性系数逐渐变小，利于局部搜索</li></ul></li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% particleswarm基础使用1</span></span><br><span class="line">narvs = <span class="number">2</span>; <span class="comment">% 变量个数</span></span><br><span class="line">x_lb = [<span class="number">-15</span> <span class="number">15</span>]; <span class="comment">% x的下界（长度等于变量个数，每个变量对于一个下界约束）</span></span><br><span class="line">x_ub = [<span class="number">15</span> <span class="number">15</span>]; <span class="comment">% x的上界</span></span><br><span class="line">[x,fval,exitflag,output] = particleswarm(@fun2,narvs,x_lb,x_ub)</span><br><span class="line"></span><br><span class="line"><span class="comment">% particleswarm基础使用2</span></span><br><span class="line">narvs = <span class="number">30</span>;</span><br><span class="line">x_lb = <span class="number">-30</span>*<span class="built_in">ones</span>(<span class="number">1</span>,<span class="number">30</span>);</span><br><span class="line">x_ub = <span class="number">30</span>*<span class="built_in">ones</span>(<span class="number">1</span>,<span class="number">30</span>);</span><br><span class="line">[x,fval,exitflag,output] = particleswarm(@fun3,narvs,x_lb,x_ub)</span><br><span class="line"></span><br><span class="line"><span class="comment">% 修改函数的参数</span></span><br><span class="line"><span class="comment">%% 绘制最佳函数值岁迭代次数的变化图</span></span><br><span class="line">options = optimoptions(<span class="string">&#x27;particleswarm&#x27;</span>,<span class="string">&#x27;PlotFcn&#x27;</span>,<span class="string">&#x27;pswplotbestf&#x27;</span>)</span><br><span class="line">[x,fval] = particleswarm(@fun3,narvs,x_lb,x_ub,options)</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 不考虑计算时间，同时修改三个控制迭代退出的参数</span></span><br><span class="line">tic</span><br><span class="line">options = optimoptions(<span class="string">&#x27;particleswarm&#x27;</span>,<span class="string">&#x27;FunctionTolerance&#x27;</span>,<span class="number">1e-12</span>,<span class="string">&#x27;MaxStallIterations&#x27;</span>,<span class="number">100</span>,<span class="string">&#x27;MaxIterations&#x27;</span>,<span class="number">100000</span>);</span><br><span class="line">[x,fval] = particleswarm(@fun3,narvs,x_lb,x_ub,options)</span><br><span class="line">toc</span><br></pre></td></tr></table></figure><table><thead><tr><th>函数中可以调整的参数（可同时修改多个）</th><th>option中的设置</th></tr></thead><tbody><tr><td>绘制最佳的函数值随迭代次数的变化图</td><td>‘PlotFcn’,’pswplotbestf’</td></tr><tr><td>展示函数的迭代过程</td><td>‘Display’,’iter’</td></tr><tr><td>修改粒子数量，默认的是：min(100,10*nvars)</td><td>‘SwarmSize’,50</td></tr><tr><td>在粒子群算法结束后继续调用其他函数进行混合求解</td><td>‘HybridFcn’,@fmincon</td></tr><tr><td>惯性权重的变化范围，默认的是0.1-1.1</td><td>‘InertiaRange’,[0.2 1.2]</td></tr><tr><td>个体学习因子，默认的是1.49（压缩因子）</td><td>‘SelfAdjustmentWeight’,2</td></tr><tr><td>社会学习因子，默认的是1.49（压缩因子）</td><td>‘socialAdjustmentWeight’,2</td></tr><tr><td>最大的迭代次数，默认的是200*nvar</td><td>‘MaxIterations’,10000</td></tr><tr><td>领域内粒子的比例 MinNeighborsFraction，默认是0.25</td><td>‘MinNeighborsFraction’,0.2</td></tr><tr><td>函数容忍度FunctionTolerance, 默认1e-6, 用于控制自动退出迭代的参数</td><td>‘FunctionTolerance’,1e-8</td></tr><tr><td>最大停滞迭代数MaxStallIterations, 默认20, 用于控制自动退出迭代的参数</td><td>‘MaxStallIterations’,50</td></tr></tbody></table><h5 id="后续讨论"><a href="#后续讨论" class="headerlink" title="后续讨论"></a>后续讨论</h5><ol><li><p><em>可以解决非线性问题吗</em>？</p><ul><li><p>初始化剔除不满足的粒子</p></li><li><p>在适应度函数上构造惩罚项</p></li></ul></li><li><p><em>可以解决组合优化问题吗？</em></p><p>具有连续型的变量，例如函数最后自的问题，成为连续优化问题</p><p>具有离散型变量，例如0-1规划，TPS旅行商问题，成为组合优化问题</p><ul><li>对原理粒子群算法运动公式和运算符号进行重新定义；</li><li>利用其他智能算法和粒子群算法结合，进行混合求解；（更好的办法：模拟退火）</li></ul></li></ol><h4 id="粒子群算法进阶应用"><a href="#粒子群算法进阶应用" class="headerlink" title="粒子群算法进阶应用"></a>粒子群算法进阶应用</h4><ul><li>求解方程组</li><li>多元函数拟合</li><li>拟合微分方程</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;暂无更多编辑，点击查看文章……&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>java小记</title>
    <link href="https://aike505.github.io/2022/07/09/java%E5%B0%8F%E8%AE%B0/"/>
    <id>https://aike505.github.io/2022/07/09/java%E5%B0%8F%E8%AE%B0/</id>
    <published>2022-07-09T09:13:16.000Z</published>
    <updated>2022-07-10T01:29:55.463Z</updated>
    
    <content type="html"><![CDATA[<p>暂无更多编辑，点击查看文章……</p><span id="more"></span><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p><strong>Java优势：</strong></p><ul><li>Write Once, Run Anywhere</li></ul><p><strong>Java三大版本</strong></p><ul><li><p>JavaSE：标准版</p></li><li><p>JavaME：嵌入式开发</p></li><li><p>JavaEE：企业级开发</p></li></ul><p><strong>三大名词</strong></p><ul><li><p>JDK：Java Development Kit </p></li><li><p>JRE：Java Runtime Environment</p></li><li><p>JVM：Java Virtual Machine</p></li></ul><blockquote><p>JDK包含JRE,所以下载JDK就可以了，java的跨平台核心是使用了JVM</p></blockquote><h3 id="java开发环境搭建"><a href="#java开发环境搭建" class="headerlink" title="java开发环境搭建"></a>java开发环境搭建</h3><p><strong>JDK的下载与安装</strong></p><ul><li>通过官网获取JDK：<a href="http://www.oracle.com/">http://www.oracle.com</a></li></ul><p><strong>配置环境变量</strong></p><ul><li>系统变量里添加JAVA_HOME</li></ul><p><img src="C:\Users\86159\AppData\Roaming\Typora\typora-user-images\image-20220708195550794.png" alt="image-20220708195550794"></p><ul><li><p>在系统变量path路径添加bin目录<img src="C:\Users\86159\AppData\Roaming\Typora\typora-user-images\image-20220708201946532.png"></p></li><li><p>同样在系统变量path路径添加jre/bin目录<img src="C:\Users\86159\AppData\Roaming\Typora\typora-user-images\image-20220708202021623.png" alt="image-20220708202021623"></p><blockquote><p>Java8之后安装jdk不再提供jre的安装，可以通过命令导出：管理员身份打开cmd,切换到java安装路径，输入命令<code> bin\jlink.exe --module-path jmods --add-modules java.desktop --output jre</code> 即可</p></blockquote></li><li><p>在用户变量中添加Classpath：<code>.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar</code></p><p><img src="C:\Users\86159\AppData\Roaming\Typora\typora-user-images\image-20220708212742988.png" alt="image-20220708212742988"></p></li><li><p>测试jdk安装是否成功</p><p><img src="C:\Users\86159\AppData\Roaming\Typora\typora-user-images\image-20220708202242207.png" alt="image-20220708202242207"></p></li></ul><p><strong>JDK目录介绍</strong></p><ul><li>bin：放可执行程序</li><li>include：java是用c和c++编写的，这里引入c语言的头文件</li><li>jre：java的运行环境</li><li>lib：放一些类库文件</li></ul><p><strong>HelloWorld及简单语法规则</strong></p><ul><li>新建一个.java文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">System.out.print(<span class="string">&quot;Hello,World!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>cmd里编译和运行</p><p><img src="C:\Users\86159\AppData\Roaming\Typora\typora-user-images\image-20220708210028376.png" alt="image-20220708210028376"></p></li></ul><p><strong>Notepad++安装和使用</strong></p><p><strong>IDEA安装</strong></p><ul><li>IDE：集成开发环境</li><li>IDEA官网：<a href="https://www.jetbrains.com/">https://www.jetbrains.com/</a></li><li>IDEA常见优化配置</li></ul><blockquote><p>vscode虽然说对java已经很好的支持了，某些功能还是不尽人意，毕竟idea才是开发java的神器，对于java开发的功能可以说都有，市场占有率超过65%。</p></blockquote><h3 id="java基础语法"><a href="#java基础语法" class="headerlink" title="java基础语法"></a>java基础语法</h3><p><strong>注释</strong></p><ul><li>单行注释：// 注释</li><li>多行注释：/* 注释 */</li><li>文档注释: /** 注释 */</li></ul><blockquote><p>书写注释是一个非常好的习惯，特别在BAT大厂里</p></blockquote><p><strong>标识符</strong><!----></p><ul><li><p>类名、变量名以及方法名。</p></li><li><p>标识符开头以字母(A-Z或者a-z)、美元符($)和下划线(_)组成</p></li><li><p>大小写敏感</p></li><li><p>可以使用中文</p></li></ul><p><strong>数据类型</strong></p><ul><li><p>强类型语言：对于变量使用要求比较严格，所有变量必须先定义后才能使用</p></li><li><p>弱类型语言：随时定义和使用，javascript、python都是</p></li><li><p>基本类型</p><ul><li>数值类型<ul><li>整数类型<ul><li>byte  1个字节范围-128-127</li><li>short  2个字节范围-32768-32767</li><li>int  4个字节范围21亿左右</li><li>long  8个字节范围</li></ul></li><li>浮点类型<ul><li>float  4个字节范围</li><li>double   8个字节范围</li></ul></li><li>字符类型<ul><li>char  2个字节</li></ul></li></ul></li><li>boolean类型<ul><li>True  占一位</li><li>False  </li></ul></li></ul></li></ul><blockquote><p>八大基本数据类型，这里基本类型和c语言基本没看出差别，字符串不属于基本类型  </p></blockquote><ul><li>引用类型<ul><li>类</li><li>接口</li><li>数组</li></ul></li></ul><p><strong>类型转换</strong></p><ul><li><p>优先级：byte,short,char==&gt;int==&gt;long==&gt;float==&gt;double</p></li><li><p>强制转换：(类型)变量名  高==&gt;低</p></li><li><p>自动转换：低–&gt;高</p></li></ul><blockquote><p>先转换类型再计算</p></blockquote><p><strong>变量</strong></p><ul><li>变量作用域<ul><li>类变量：定义前加一个static，用的时候可以不用声明值，全局可用</li><li>实例变量：写在方法外面，可以不赋值，全局可用，使用要new一个对象</li><li>局部变量：普通的定义，必须给初始化值，只在某个方法里有用</li></ul></li><li>变量命名规范<ul><li>见名知意</li><li>类成员变量：首字母小写驼峰原则   monthSalary</li><li>局部变量：首字母小写驼峰原则</li><li>常量：全部大写可以加下划线</li><li>类名：首字母大写驼峰原则  GoodMan()</li><li>方法名：首字母小写驼峰原则  runRun()</li></ul></li></ul><p><strong>常量</strong></p><ul><li><p>用final声明，用大学字母表示</p><blockquote><p>比如写个PI等于多少，后面一直用而且值不变</p></blockquote></li></ul><p><strong>运算符</strong></p><ul><li><p>算术运算符 + - * /  % ++ –</p><blockquote><p>有long结果为long，没有long 都是int，int不能强制转成string</p><p>乘方计算：java里不能用2^3，需要借助工具Math.pow(2,3)</p></blockquote></li><li><p>赋值运算符 =</p></li><li><p>关系运算符 &gt; &lt; &gt;= &lt;= == !=</p></li><li><p>逻辑运算符 &amp;&amp; || !</p><blockquote><p>&amp;&amp; 都真为真，执行短路运算，检测到一个假后面的都不计算，值也不变    </p><p>|| 有真就真</p><p>！真变假，假变真</p></blockquote></li><li><p>位运算符 &amp; | ^ ~ &gt;&gt; &lt;&lt; &gt;&gt;&gt;</p><blockquote><p>&amp; 同1才是1</p><p>| 有1就是1</p><p>^ 不一样就是1</p><p>~ 0变1，1变0</p><p>&lt;&lt; 左移 *2</p><p>/&gt;&gt; 右移 /2</p></blockquote></li><li><p>条件运算符 ? :</p><blockquote><p>x ? y : z</p><p>如果x==true，结果为y，否则为z</p></blockquote></li><li><p>扩展赋值运算符 += -= *= /=</p><blockquote><p>字符串拼接</p><ul><li> “ “+a+b，先转换成字符串再拼接</li><li>a+b+” “,先运算在转成字符串拼接</li></ul></blockquote></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;暂无更多编辑，点击查看文章……&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>虚拟机安装macOS系统</title>
    <link href="https://aike505.github.io/2022/04/26/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85macOS%E7%B3%BB%E7%BB%9F/"/>
    <id>https://aike505.github.io/2022/04/26/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85macOS%E7%B3%BB%E7%BB%9F/</id>
    <published>2022-04-26T03:43:54.000Z</published>
    <updated>2022-04-26T03:45:47.641Z</updated>
    
    <content type="html"><![CDATA[<p>VMware虚拟机安装macOS全过程详解</p><span id="more"></span><p>参考链接</p><p><a href="https://www.pc-daily.com/xitong/75975.html">虚拟机安装macos系统（VMware虚拟机安装macOS详细</a></p><p><a href="https://blog.csdn.net/Simon_477/article/details/110252233">虚拟机VMware安装苹果系统macOS，超级详细教程，附文件下载，真教程！！</a></p><p><a href="https://baijiahao.baidu.com/s?id=1697367423466273816&wfr=spider&for=pc">如何使用虚拟机VMware安装苹果macOS系统</a></p><h5 id="1-安装虚拟机VMware"><a href="#1-安装虚拟机VMware" class="headerlink" title="1 安装虚拟机VMware"></a>1 安装虚拟机VMware</h5><p><a href="https://mp.weixin.qq.com/s?__biz=MzIyNjAxMjEwOQ==&mid=2247502732&idx=5&sn=27221e888444d6c36ac62f4767337215&chksm=e874752edf03fc38cadb220b2e77654f32248976e7fa2af240ba7f1e0c0527541ebba5725643&scene=21#wechat_redirect">VMware16</a></p><h5 id="2-安装解锁工具unlocker"><a href="#2-安装解锁工具unlocker" class="headerlink" title="2  安装解锁工具unlocker"></a>2  安装解锁工具unlocker</h5><p>解锁虚拟机安装macOS限制工具</p><p><a href="http://www.winwin7.com/soft/9473.html#xiazai">unlocker v3.0.3</a></p><blockquote><ul><li><strong><a href="https://blog.csdn.net/puspos/article/details/108900141">运行unlocker中win-install时，出现file not found-darwin.</a></strong></li></ul></blockquote><h5 id="3-虚拟机安装-maOS"><a href="#3-虚拟机安装-maOS" class="headerlink" title="3 虚拟机安装 maOS"></a>3 虚拟机安装 maOS</h5><p><a href="https://www.mhero.com/macos">macOS系统下载</a></p><p><a href="https://cloud.mfpud.com/VirtualCDR/44EE85B8FF68F7428C0AE7B3AA27661E/">macOS kealos 10.15</a> （非百度云盘）</p><p><a href="https://sysin.org/blog/macOS/">Apple macOS 下载汇总（系统、应用和技巧）</a></p><blockquote><ul><li>报错<a href="https://www.bilibili.com/read/cv13362122"><strong>客户机操作系统已禁用 CPU</strong></a></li></ul></blockquote><h5 id="4-解决安装后屏幕适应问题"><a href="#4-解决安装后屏幕适应问题" class="headerlink" title="4 解决安装后屏幕适应问题"></a>4 解决安装后屏幕适应问题</h5><p>安装VMware Tools，用到步骤二中darwin.iso</p><h5 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h5><p><a href="https://baijiahao.baidu.com/s?id=1691924549832120099&wfr=spider&for=pc">虚拟机中的Mac系统怎么优化</a></p><p><a href="https://blog.csdn.net/SSS_Benjamin/article/details/89296164">VMware 15 上Mac虚拟机卡顿情况的优化</a></p><p><a href="https://zhuanlan.zhihu.com/p/337036027">全网最详细的VMware虚拟机安装MacOS系统教程，没有之一！！！附全部资源</a></p><p><strong>网络</strong></p><p><a href="https://m.kafan.cn/A/gvx45wd73r.html">mac虚拟机如何开启wifi</a></p><p><a href="https://blog.csdn.net/kof820/article/details/50515115?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_antiscanv2&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_antiscanv2&utm_relevant_index=1">VMware虚拟机mac系统以太网无法上网</a></p><p><strong>app store</strong></p><p><a href="https://jingyan.baidu.com/article/e75aca852cd5a9142fdac610.html">app store 购买过程中出错 错误500解决方法</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;VMware虚拟机安装macOS全过程详解&lt;/p&gt;</summary>
    
    
    
    
    <category term="虚拟机" scheme="https://aike505.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>11.Python第三方库纵览</title>
    <link href="https://aike505.github.io/2021/09/05/11-Python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E7%BA%B5%E8%A7%88/"/>
    <id>https://aike505.github.io/2021/09/05/11-Python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E7%BA%B5%E8%A7%88/</id>
    <published>2021-09-05T02:08:23.000Z</published>
    <updated>2021-09-25T02:08:25.425Z</updated>
    
    <content type="html"><![CDATA[<p>Python第三方库纵览</p><span id="more"></span><h1 id="11-Python第三方库纵览"><a href="#11-Python第三方库纵览" class="headerlink" title="11.Python第三方库纵览"></a>11.Python第三方库纵览</h1><ul><li>思维导图<br><img src="https://cdn.jsdelivr.net/gh/Aike505/ImgHosting/Aike505-PIC/2021.9.5_11.Python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E7%BA%B5%E8%A7%88.png"></li></ul><blockquote><h2 id="考纲考点"><a href="#考纲考点" class="headerlink" title="考纲考点"></a>考纲考点</h2><p>更广泛的Python计算生态，只要求了解第三方库的名称，不限于以下领域: 网络爬虫、数据分析、文本处理、数据可视化、用户图形界面、机器学习、Web开发、游戏开发等</p></blockquote><table><thead><tr><th>方向</th><th>第三方库</th><th>介绍</th></tr></thead><tbody><tr><td>网络爬虫方向</td><td>requests<br>scrapy</td><td>requests库是一个简洁且简单的处理HTTP请求的第三方库，它的最大优点是程序编写过程更接近正常URL访问过程。<br>scrapy是Python开发的一个快速的、高层次的Web获取框架。</td></tr><tr><td>数据分析方向</td><td>numpy<br>scipy<br>pandas</td><td>numpy是Python的一种开源数值计算扩展第三方库，用于处理数据类型相同的多维数组（ndarray），简称“数组”<br>scipy是一款方便、易于使用、专为科学和工程设计的Python工具包。<br>pandas是基于numpy扩展的一个重要第三方库，它是为了解决数据分析任务而创建的。</td></tr><tr><td>文本处理方向</td><td>pdfminer<br>openpyxl<br>python-docx<br>beautifulsoup4</td><td>pdfminer是一个可以从PDF文档中提取各类信息的第三方库<br>openpyxl是一个处理Microsoft Excel文档Python第三方库<br>python-docx是一个处理Microsoft Word文档的Python第三方库<br>beautifulsoup4库，也称为Beautiful Soup库或bs4库，用于解析和处理HTML和XML</td></tr><tr><td>数据可视化</td><td>matplotlib<br>TVTK<br>mayavi</td><td>matplotlib是提供数据绘图功能的第三方库，主要进行二维图表数据展示，广泛用于科学计算的数据可视化<br>TVTK库在标准的VTK库之上用Traits库进行封装的Python第三方库<br>mayavi基于VTK开发，完全用Python编写，提供了一个更为方便实用的可视化软件</td></tr><tr><td>用户图形界面方向</td><td>pyqt5<br>wxpython<br>pygtk</td><td>Python语言当前最好的GUI第三方库，它可以在Windows、Linux和Mac OS X等操作系统上跨平台使用<br>wxPython是Python语言的一套优秀的GUI图形库，它是跨平台GUI库wxWidgets的Python封装<br>pygtk是基于GTK+的Python语言封装，它提供了各式的可视元素和功能，能够轻松创建具有图形用户界面的程序。</td></tr><tr><td>机器学习方向</td><td>Scikit-learn<br>TensorFlow<br>Theano</td><td>Scikit-learn是一个简单且高效的数据挖掘和数据分析工具<br>TensorFlow是谷歌公司基于DistBelief进行研发的第二代人工智能学习系统，也是用来支撑著名的AlphaGo系统的后台框架<br>Theano为执行深度学习中大规模神经网络算法的运算而设计，擅长处理多维数组</td></tr><tr><td>Web开发方向</td><td>Django<br>Pyramid<br>Flask</td><td>Django是Python生态中最流行的开源Web应用框架<br>Pyramid是一个通用、开源的Python Web应用程序开发框架<br>Flask是轻量级Web应用框架，相比Django和Pyramid，它也被称为微框架</td></tr><tr><td>游戏开发方向</td><td>Pygame<br>Panda3D<br>cocos2d</td><td>Pygame是在SDL库基础上进行封装的、面向游戏开发入门的Python第三方库，除了制作游戏外，还用于制作多媒体应用程序<br>Panda3D是一个开源、跨平台的3D渲染和游戏开发库,简答说，它是一个3D游戏引擎，由迪士尼和卡耐基梅隆大学娱乐技术中心共同进行开发<br>cocos2d是一个构建2D游戏和图形界面交互式应用的框架，它包括C++、JavaScript、Swift、Python等多个版本</td></tr></tbody></table><p>Python语言有超过12万个第三方库，覆盖信息技术几乎所有领域。即使每个方向，也会有大量的专业人员开发多个第三方库来给出具体设计。除了本章所提到的方向外，这里再列出5个<strong>有趣且有用</strong>的Python第三方库，展示Python在工程实践方面强大的魅力。</p><table><thead><tr><th>更多第三方库</th><th>介绍</th></tr></thead><tbody><tr><td>PIL</td><td>PIL库是Python语言在图像处理方面的重要第三方库，支持图像存储、显示和处理，它能够处理几乎所有图片格式，可以完成对图像的缩放、剪裁、叠加以及向图像添加线条、图像和文字等操作。</td></tr><tr><td>SymPy</td><td>SymPy是一个支持符号计算的Python第三方库，它是一个全功能的计算机代数系统。SymPy代码简洁、易于理解，支持符号计算、高精度计算、模式匹配、绘图、解方程、微积分、组合数学、离散数学、几何学、概率与统计、物理学等领域计算和应用。</td></tr><tr><td>NLTK</td><td>NLTK是一个非常重要的自然语言处理Python第三方库，它支持多种语言，尤其对中文支持良好。NLTK可以进行语料处理、文本统计、内容理解、情感分析等多种应用，具备非常可靠的应用价值。</td></tr><tr><td>WeRoBot</td><td>WeRoBot 是一个微信公众号开发框架，也称为的微信机器人框架。WeRoBot可以解析微信服务器发来的消息，并将消息转换成成Message或者Event类型。</td></tr><tr><td>MyQR</td><td>MyQR是一个能够产生基本二维码、艺术二维码和动态效果二维码的Python第三方库。图11.1给出了一些MyQR生成二维码的实例。</td></tr></tbody></table><ul><li>图11.1<br><img src="https://cdn.jsdelivr.net/gh/Aike505/ImgHosting/Aike505-PIC/2021.9.5_11.Python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E7%BA%B5%E8%A7%88_1.png"></li></ul><blockquote><h2 id="本章小结"><a href="#本章小结" class="headerlink" title="本章小结"></a>本章小结</h2><p>本章通过8个具体方向30个Python功能库的简要介绍纵览Python语言计算生态的丰富性，希望读者能够从Python基础语法出发，看到更广阔的程序设计生态，进一步“理解和运用计算生态”，掌握符合信息时代需要的程序设计能力。<br><br>国家计算机等级考试不仅仅是一场考试，更是检验能力提升的手段，加油!<br><br><br>点击<a href="https://python123.io/student/series/1/">这里</a>获取所有章节pdf<br>点击<a href="https://python123.io/python/songtian/5ed87dc83b5ca9663fd4761d">这里</a>获取更多内容</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;Python第三方库纵览&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://aike505.github.io/categories/Python/"/>
    
    <category term="二级" scheme="https://aike505.github.io/categories/Python/%E4%BA%8C%E7%BA%A7/"/>
    
    
    <category term="Python" scheme="https://aike505.github.io/tags/Python/"/>
    
    <category term="二级" scheme="https://aike505.github.io/tags/%E4%BA%8C%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>10.Python第三方库概览</title>
    <link href="https://aike505.github.io/2021/09/05/10-Python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E6%A6%82%E8%A7%88/"/>
    <id>https://aike505.github.io/2021/09/05/10-Python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E6%A6%82%E8%A7%88/</id>
    <published>2021-09-05T02:07:57.000Z</published>
    <updated>2021-09-25T01:45:59.201Z</updated>
    
    <content type="html"><![CDATA[<p>Python第三方库概览</p><span id="more"></span><h1 id="10-Python第三方库概览"><a href="#10-Python第三方库概览" class="headerlink" title="10.Python第三方库概览"></a>10.Python第三方库概览</h1><ul><li>思维导图<br><img src="https://cdn.jsdelivr.net/gh/Aike505/ImgHosting/Aike505-PIC/2021.9.5_10.Python%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E6%A6%82%E8%A7%88.png"></li></ul><blockquote><h2 id="考纲考点"><a href="#考纲考点" class="headerlink" title="考纲考点"></a>考纲考点</h2><p>第三方库的获取和安装<br><br>脚本程序转变为可执行程序的第三方库:PyInstaller库(必选)<br><br>第三方库: jieba库(必选)、wordcloud库（可选）</p></blockquote><h2 id="10-1-Python第三方库的获取与安装"><a href="#10-1-Python第三方库的获取与安装" class="headerlink" title="10.1 Python第三方库的获取与安装"></a>10.1 Python第三方库的获取与安装</h2><p>Python第三方库依照安装方式灵活性和难易程度有三个方法：<strong>pip工具安装</strong>、<strong>自定义安装</strong>和<strong>文件安装</strong>。</p><h3 id="10-1-1-pip工具安装"><a href="#10-1-1-pip工具安装" class="headerlink" title="10.1.1 pip工具安装"></a>10.1.1 pip工具安装</h3><p>最常用且最高效的Python第三方库安装方式是采用pip工具安装。pip是Python官方提供并维护的在线第三方库安装工具。<br><br><code>pip install&lt;拟安装库名称&gt;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:\&gt;pip install pygame</span><br><span class="line">...</span><br><span class="line">Installing collected packages: pygame</span><br><span class="line">Successfully installed pygame-1.9.2b1</span><br></pre></td></tr></table></figure><p>pip常用指令,可以通过<code>pip help</code>查看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\86159&gt;pip -h</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  pip &lt;command&gt; [options]</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  install                     Install packages.</span><br><span class="line">  download                    Download packages.</span><br><span class="line">  uninstall                   Uninstall packages.</span><br><span class="line">  freeze                      Output installed packages in requirements format.</span><br><span class="line">  list                        List installed packages.</span><br><span class="line">  show                        Show information about installed packages.</span><br><span class="line">  check                       Verify installed packages have compatible dependencies.</span><br><span class="line">  config                      Manage local and global configuration.</span><br><span class="line">  search                      Search PyPI for packages.</span><br><span class="line">  cache                       Inspect and manage pip&#x27;s wheel cache.</span><br><span class="line">  wheel                       Build wheels from your requirements.</span><br><span class="line">  hash                        Compute hashes of package archives.</span><br><span class="line">  completion                  A helper command used for command completion.</span><br><span class="line">  debug                       Show information useful for debugging.</span><br><span class="line">  help                        Show help for commands.</span><br></pre></td></tr></table></figure><h3 id="10-1-2-自定义安装"><a href="#10-1-2-自定义安装" class="headerlink" title="10.1.2 自定义安装"></a>10.1.2 自定义安装</h3><p>自定义安装指按照第三方库提供的步骤和方式安装。第三方库都有主页用于维护库的代码和文档。以科学计算用的numpy为例，开发者维护的官方主页是：<a href="http://www.numpy.org/">http://www.numpy.org/</a><br><br>浏览该网页找到下载链接，如下：<a href="https://www.scipy.org/scipylib/download.html">https://www.scipy.org/scipylib/download.html</a><br><br>进入根据指示步骤安装。</p><h3 id="10-1-3-文件安装"><a href="#10-1-3-文件安装" class="headerlink" title="10.1.3 文件安装"></a>10.1.3 文件安装</h3><p>为了解决这类第三方库安装问题，美国加州大学尔湾分校提供了一个页面，帮助Python用户获得Windows可直接安装的第三方库文件，链接地址如下：<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/">https://www.lfd.uci.edu/~gohlke/pythonlibs/</a><br><br>这里以scipy为例说明，首先在上述页面中找到scipy库对应的内容。选择其中的.whl文件下载，这里选择适用于Python 3.5版本解释器和32位系统的对应文件：scipy- 0 . 1 7 . 1 - cp3 5 - cp3 5m-win3 2 .whl，下载该文件到D:\pycodes目录。<br>然后，采用pip命令安装该文件。<br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:\&gt;pip install D:\pycodes\scipy-0.17.1-cp35-cp35m-win32.whl</span><br><span class="line">Processing d:\pycodes\scipy-0.17.1-cp35-cp35m-win32.whl</span><br><span class="line">Installing collected packages: scipy</span><br><span class="line">Successfully installed scipy-0.17.1</span><br></pre></td></tr></table></figure><blockquote><p>对于上述三种安装方式，一般优先选择采用pip工具安装，如果安装失败，则选择自定义安装或者文件安装。另外，如果需要在没有网络条件下安装Python第三方库，请直接采用文件安装方式。其中，.whl文件可以通过pip download指令在有网络条件的情况下获得。</p></blockquote><h2 id="10-2-pyinstaller库"><a href="#10-2-pyinstaller库" class="headerlink" title="10.2 pyinstaller库"></a>10.2 pyinstaller库</h2><h3 id="10-2-1-pyinstaller库概述"><a href="#10-2-1-pyinstaller库概述" class="headerlink" title="10.2.1 pyinstaller库概述"></a>10.2.1 pyinstaller库概述</h3><p>PyInstaller是一个十分有用的Python第三方库，它能够在Windows、Linux、Mac OS X等操作系统下将Python源文件打包，变成直接可运行的可执行文件。<br><br><br>通过对源文件打包，Python程序可以在没有安装Python的环境中运行，也可以作为一个独立文件方便传递和管理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:\&gt;pip install PyInstaller</span><br></pre></td></tr></table></figure><h3 id="10-2-2-PyInstaller库与程序打包"><a href="#10-2-2-PyInstaller库与程序打包" class="headerlink" title="10.2.2 PyInstaller库与程序打包"></a>10.2.2 PyInstaller库与程序打包</h3><p>使用PyInstaller库对Python源文件打包十分简单，使用方法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:\&gt;PyInstaller &lt;Python源程序文件名&gt;</span><br></pre></td></tr></table></figure><p>执行完毕后，源文件所在目录将生成dist和build两个文件夹。最终的打包程序在dist内部与源文件同名的目录中。<br><br><br>可以通过-F参数对Python源文件生成一个独立的可执行文件，如下：<br><br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:\&gt;PyInstaller -F SnowView.py</span><br></pre></td></tr></table></figure><p>执行后在dist目录中出现了SnowView.exe文件，没有任何依赖库，执行它即可显示雪景效果。</p><table><thead><tr><th>参数</th><th>功能</th></tr></thead><tbody><tr><td>-h, –help</td><td>查看帮助</td></tr><tr><td>–clean</td><td>清理打包过程中的临时文件</td></tr><tr><td>-D, –onedir</td><td>默认值，生成dist目录</td></tr><tr><td>-F, –onefile</td><td>在dist文件夹中只生成独立的打包文件</td></tr><tr><td>-i &lt;图标文件名.ico &gt;</td><td>指定打包程序使用的图标（icon）文件</td></tr></tbody></table><h2 id="10-3-jieba库"><a href="#10-3-jieba库" class="headerlink" title="10.3 jieba库"></a>10.3 jieba库</h2><h3 id="10-3-1-jieba库概述"><a href="#10-3-1-jieba库概述" class="headerlink" title="10.3.1 jieba库概述"></a>10.3.1 jieba库概述</h3><p>jieba（“结巴”）是Python中一个重要的第三方中文分词函数库。<br><br><br>jieba库安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:\&gt;pip install jieba</span><br></pre></td></tr></table></figure><p>jieba库支持三种分词模式：<strong>精确模式</strong>，将句子最精确地切开，适合文本分析；<strong>全模式</strong>，把句子中所有可以成词的词语都扫描出来，速度非常快，但是不能解决歧义；<strong>搜索引擎模式</strong>，在精确模式基础上，对长词再次切分，提高召回率，适合用于搜索引擎分词。<br><br><br>对中文分词来说，jieba库只需要一行代码即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;import jieba</span><br><span class="line">&gt;&gt;&gt;jieba.lcut(&quot;全国计算机等级考试&quot;)</span><br><span class="line">Building prefix dict from the default dictionary ...</span><br><span class="line">Loading model from cache C:\AppData\Local\Temp\jieba.cache</span><br><span class="line">Loading model cost 1.001 seconds.</span><br><span class="line">Prefix dict has been built succesfully.</span><br><span class="line">[&#x27;全国&#x27;,&#x27;计算机&#x27;,&#x27;等级&#x27;,&#x27;考试&#x27;]</span><br></pre></td></tr></table></figure><h3 id="10-3-2-jieba库与中文分词"><a href="#10-3-2-jieba库与中文分词" class="headerlink" title="10.3.2 jieba库与中文分词"></a>10.3.2 jieba库与中文分词</h3><table><thead><tr><th>模式</th><th>功能</th></tr></thead><tbody><tr><td>jieba.lcut(s)</td><td>最常用的中文分词函数，用于精准模式，即将字符串分割成等量的中文词组，返回结果是列表类型</td></tr><tr><td>jieba.lcut(s, cut_all = True)</td><td>用于全模式，即将字符串的所有分词可能均列出来，返回结果是列表类型，冗余性最大</td></tr><tr><td>jieba.lcut_for_search(s)</td><td>返回搜索引擎模式，该模式首先执行精确模式，然后再对其中长词进一步切分获得最终结果</td></tr><tr><td>jieba.add_word()</td><td>顾名思义，用来向jieba词库增加新的单词。</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;import jieba</span><br><span class="line">&gt;&gt;&gt;ls = jieba.lcut(&quot;全国计算机等级考试Python科目&quot;)</span><br><span class="line">&gt;&gt;&gt;print(ls)</span><br><span class="line">[&#x27;全国&#x27;,&#x27;计算机&#x27;,&#x27;等级&#x27;,&#x27;考试&#x27;,&#x27;Python&#x27;,&#x27;科目&#x27;]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;import jieba</span><br><span class="line">&gt;&gt;&gt;ls = jieba.lcut(&quot;全国计算机等级考试Python科目&quot;, cut_all=True)</span><br><span class="line">&gt;&gt;&gt;print(ls)</span><br><span class="line">[&#x27;全国&#x27;,&#x27;国计&#x27;,&#x27;计算&#x27;,&#x27;计算机&#x27;,&#x27;算机&#x27;,&#x27;等级&#x27;,&#x27;考试&#x27;,&#x27;Python&#x27;,&#x27;科目&#x27;]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;import jieba</span><br><span class="line">&gt;&gt;&gt;ls = jieba.lcut_for_search(&quot;全国计算机等级考试Python科目&quot;)</span><br><span class="line">&gt;&gt;&gt;print(ls)</span><br><span class="line">[&#x27;全国&#x27;,&#x27;计算&#x27;,&#x27;算机&#x27;,&#x27;计算机&#x27;,&#x27;等级&#x27;,&#x27;考试&#x27;,&#x27;Python&#x27;,&#x27;科目&#x27;]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;import jieba</span><br><span class="line">&gt;&gt;&gt;jieba.add_word(&quot;Python科目&quot;)</span><br><span class="line">&gt;&gt;&gt;ls = jieba.lcut(&quot;全国计算机等级考试Python科目&quot;)</span><br><span class="line">&gt;&gt;&gt;print(ls)</span><br><span class="line">[&#x27;全国&#x27;,&#x27;计算机&#x27;,&#x27;等级&#x27;,&#x27;考试&#x27;,&#x27;Python科目&#x27;]</span><br></pre></td></tr></table></figure><h2 id="10-4-worldcloud库"><a href="#10-4-worldcloud库" class="headerlink" title="10.4 worldcloud库"></a>10.4 worldcloud库</h2><h3 id="10-4-1-worldcloud库概述"><a href="#10-4-1-worldcloud库概述" class="headerlink" title="10.4.1 worldcloud库概述"></a>10.4.1 worldcloud库概述</h3><p>wordcloud库是专门用于根据文本生成词云的Python第三方库，十分常用且有趣。<br><br><br>装wordcloud库在Windows的cmd命令行使用如下命令：<code>:\&gt;pip install wordcloud</code><br><br><br>wordcloud库的使用十分简单，以一个字符串为例。其中，产生词云只需要一行语句，在第三行，并可以将词云保存为图片。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;from wordcloud import WordCloud</span><br><span class="line">&gt;&gt;&gt;txt=&#x27;I like python. I am learning python&#x27;</span><br><span class="line">&gt;&gt;&gt;wordcloud = WordCloud().generate(txt)</span><br><span class="line">&gt;&gt;&gt;wordcloud.to_file(&#x27;testcloud.png&#x27;)</span><br><span class="line">&lt;wordcloud.wordcloud.WordCloud object at 0x000001583E26D208&gt;</span><br></pre></td></tr></table></figure><h3 id="10-4-2-worldcloud库与可视化词云"><a href="#10-4-2-worldcloud库与可视化词云" class="headerlink" title="10.4.2 worldcloud库与可视化词云"></a>10.4.2 worldcloud库与可视化词云</h3><p>在生成词云时，wordcloud默认会以空格或标点为分隔符对目标文本进行分词处理。对于中文文本，分词处理需要由用户来完成。<br><br>一般步骤是先将文本分词处理，然后以空格拼接，再调用wordcloud库函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import jieba</span><br><span class="line">from wordcloud import WordCloud</span><br><span class="line">txt = &#x27;程序设计语言是计算机能够理解和识别用户操作意图的一种交互体系，它按</span><br><span class="line">照特定规则组织计算机指令，使计算机能够自动进行各种运算处理。&#x27;</span><br><span class="line">words = jieba.lcut(txt) # 精确分词</span><br><span class="line">newtxt = &#x27; &#x27;.join(words) # 空格拼接</span><br><span class="line">wordcloud = WordCloud(font_path=&quot;msyh.ttc&quot;).generate(newtxt)</span><br><span class="line">wordcloud.to_file(&#x27;词云中文例子图.png&#x27;) # 保存图片</span><br></pre></td></tr></table></figure><p>wordcloud库的核心是WordColoud类，所有的功能都封装在WordCloud类中。使用时需要实<br>例化一个WordColoud类的对象，并调用其generate(text)方法将text文本转化为词云。<br><br><br>WordCloud对象创建的常用参数:</p><table><thead><tr><th>参数</th><th>功能</th></tr></thead><tbody><tr><td>font_path</td><td>指定字体文件的完整路径，默认None</td></tr><tr><td>width</td><td>生成图片宽度，默认400像素</td></tr><tr><td>height</td><td>生成图片高度，默认200像素</td></tr><tr><td>mask</td><td>词云形状，默认None，即，方形图</td></tr><tr><td>min_font_size</td><td>词云中最小的字体字号，默认4号</td></tr><tr><td>font_step</td><td>字号步进间隔，默认1</td></tr><tr><td>min_font_size</td><td>词云中最大的字体字号，默认None，根据高度自动调节</td></tr><tr><td>max_words</td><td>词云图中最大词数，默认200</td></tr><tr><td>stopwords</td><td>被排除词列表，排除词不在词云中显示</td></tr><tr><td>background_color</td><td>图片背景颜色，默认黑色</td></tr></tbody></table><p>WordCloud类的常用方法:</p><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>generate(text)</td><td>由text文本生成词云</td></tr><tr><td>to_file(filename)</td><td>将词云图保存为名为filename的文件</td></tr></tbody></table><h2 id="10-5-实例解析：《红楼梦》人物出场词"><a href="#10-5-实例解析：《红楼梦》人物出场词" class="headerlink" title="10.5 实例解析：《红楼梦》人物出场词"></a>10.5 实例解析：《红楼梦》人物出场词</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;Python第三方库概览&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://aike505.github.io/categories/Python/"/>
    
    <category term="二级" scheme="https://aike505.github.io/categories/Python/%E4%BA%8C%E7%BA%A7/"/>
    
    
    <category term="Python" scheme="https://aike505.github.io/tags/Python/"/>
    
    <category term="二级" scheme="https://aike505.github.io/tags/%E4%BA%8C%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>9.Python标准库概览</title>
    <link href="https://aike505.github.io/2021/09/05/9-Python%E6%A0%87%E5%87%86%E5%BA%93%E6%A6%82%E8%A7%88/"/>
    <id>https://aike505.github.io/2021/09/05/9-Python%E6%A0%87%E5%87%86%E5%BA%93%E6%A6%82%E8%A7%88/</id>
    <published>2021-09-05T02:07:40.000Z</published>
    <updated>2021-09-25T01:28:01.176Z</updated>
    
    <content type="html"><![CDATA[<p>Python标准库概览</p><span id="more"></span><h1 id="9-Python标准库概览"><a href="#9-Python标准库概览" class="headerlink" title="9.Python标准库概览"></a>9.Python标准库概览</h1><ul><li>思维导图<br><img src="https://cdn.jsdelivr.net/gh/Aike505/ImgHosting/Aike505-PIC/2021.9.5_9.Python%E6%A0%87%E5%87%86%E5%BA%93%E6%A6%82%E8%A7%88.png"></li></ul><blockquote><h2 id="考纲考点"><a href="#考纲考点" class="headerlink" title="考纲考点 "></a>考纲考点 <br></h2><p>标准库: turtle库(必选) <br><br>标准库: random库(必选)、time库(可选）</p></blockquote><h2 id="9-1-turtle库"><a href="#9-1-turtle库" class="headerlink" title="9.1 turtle库"></a>9.1 turtle库</h2><p>turtle（海龟）是Python重要的标准库之一，它能够进行基本的图形绘制。</p><h3 id="9-1-1-对turtle库的引用"><a href="#9-1-1-对turtle库的引用" class="headerlink" title="9.1.1 对turtle库的引用"></a>9.1.1 对turtle库的引用</h3><p>使用import保留字对turtle库的引用有如下三种方式:</p><table><thead><tr><th>方式</th><th>调用</th><th>示例</th></tr></thead><tbody><tr><td>import turtle</td><td>turtle.&lt;函数名&gt;()形式</td><td><code>import turtle    turtle.circle(200) </code></td></tr><tr><td>from turtle import *</td><td>&lt;函数名&gt;()</td><td><code>from turtle import * circle(200)</code></td></tr><tr><td>import turtle as t</td><td>t.&lt;函数名&gt;()</td><td><code>import turtle as t t.circle(200)</code></td></tr></tbody></table><blockquote><p>turtle库包含100多个功能函数，主要包括窗体函数、画笔状态函数、画笔运动函数等三类。</p></blockquote><h3 id="9-1-2-窗体函数"><a href="#9-1-2-窗体函数" class="headerlink" title="9.1.2 窗体函数"></a>9.1.2 窗体函数</h3><p>turtle.setup(width, height, startx, star)<br><br>作用：设置主窗体的大小和位置</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>width</td><td>窗口宽度<br>如果值是整数，表示的像素值；如果值是小数，表示窗口宽度与屏幕的比例；</td></tr><tr><td>height</td><td>窗口高度<br>如果值是整数，表示的像素值；如果值是小数，表示窗口高度与屏幕的比例；</td></tr><tr><td>startx</td><td>窗口左侧与屏幕左侧的像素距离<br>如果值是None，窗口位于屏幕水平中央；</td></tr><tr><td>starty</td><td>窗口顶部与屏幕顶部的像素距离<br>如果值是None，窗口位于屏幕垂直中央；</td></tr></tbody></table><h3 id="9-1-3-画笔状态函数"><a href="#9-1-3-画笔状态函数" class="headerlink" title="9.1.3 画笔状态函数"></a>9.1.3 画笔状态函数</h3><table><thead><tr><th>函数</th><th>描述</th><th>参数</th></tr></thead><tbody><tr><td>pendown()<br>pd()<br>down()</td><td>放下画笔</td><td></td></tr><tr><td>penup()</td><td>提起画笔，与pendown()配对使用</td><td>turtle.pu(), turtle.up()</td></tr><tr><td>pensize(width)<br>width()</td><td>设置画笔线条的粗细为指定大小</td><td>width ：设置的画笔线条宽度，如果为None或者为空，函数则返回当前画笔宽度。</td></tr><tr><td>color()<br>pencolor((r,g,b))</td><td>设置画笔的颜色</td><td>colorstring ：表示颜色的字符串，例如：”purple”、”red”、”blue”等<br>(r,g,b): 颜色对应RGB的01数值，例如：1, 0.65, 0</td></tr><tr><td>begin_fill()</td><td>填充图形前，调用该方法</td><td></td></tr><tr><td>end_fill()</td><td>填充图形结束</td><td></td></tr><tr><td>filling()</td><td>返回填充的状态，True为填充，False为未填充</td><td></td></tr><tr><td>clear()</td><td>清空当前窗口，但不改变当前画笔的位置</td><td></td></tr><tr><td>reset()</td><td>清空当前窗口，并重置位置等状态为默认值</td><td></td></tr><tr><td>screensize()</td><td>设置画布的长和宽</td><td></td></tr><tr><td>hideturtle()</td><td>隐藏画笔的turtle形状</td><td></td></tr><tr><td>showturtle()</td><td>显示画笔的turtle形状</td><td></td></tr><tr><td>isvisible()</td><td>如果turtle可见，则返回True</td><td></td></tr></tbody></table><h3 id="9-1-4-画笔运动函数"><a href="#9-1-4-画笔运动函数" class="headerlink" title="9.1.4 画笔运动函数"></a>9.1.4 画笔运动函数</h3><table><thead><tr><th>函数</th><th>描述</th><th>参数</th></tr></thead><tbody><tr><td>forward()<br>fd()</td><td>沿着当前方向前进指定距离</td><td>distance ：行进距离的像素值，当值为负数时，表示向相反方向前进。</td></tr><tr><td>backward()</td><td>沿着当前相反方向后退指定距离</td><td></td></tr><tr><td>right(angle)</td><td>向右旋转angle角度</td><td></td></tr><tr><td>left(angle)</td><td>向左旋转angle角度</td><td></td></tr><tr><td>goto(x,y)</td><td>移动到绝对坐标（x,y）处</td><td></td></tr><tr><td>setx( )</td><td>将当前x轴移动到指定位置</td><td></td></tr><tr><td>sety( )</td><td>将当前y轴移动到指定位置</td><td></td></tr><tr><td>setheading(angle)<br>seth()</td><td>设置当前朝向为angle角度</td><td>to_angle ：角度的整数值。</td></tr><tr><td>home()</td><td>设置当前画笔位置为原点，朝向东。</td><td></td></tr><tr><td>circle(radius,e)</td><td>绘制一个指定半径r和角度e的圆或弧形</td><td>radius ：弧形半径，当值为正数时，半径在小海龟左侧，当值为负数时，半径在小海龟右侧；<br>extent : 绘制弧形的角度，当不给该参数或参数为None时，绘制整个圆形。</td></tr><tr><td>dot(r,color)</td><td>绘制一个指定半径r和颜色color的圆点</td><td></td></tr><tr><td>undo()</td><td>撤销画笔最后一步动作</td><td></td></tr><tr><td>speed()</td><td>设置画笔的绘制速度，参数为0-10之</td><td></td></tr></tbody></table><h2 id="9-2-random库"><a href="#9-2-random库" class="headerlink" title="9.2 random库"></a>9.2 random库</h2><p>使用random库主要目的是<strong>生成随机数</strong></p><h3 id="9-2-1-random库的常用函数"><a href="#9-2-1-random库的常用函数" class="headerlink" title="9.2.1 random库的常用函数"></a>9.2.1 random库的常用函数</h3><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>seed(a=None)</td><td>初始化随机数种子，默认值为当前系统时间</td></tr><tr><td>random()</td><td>生成一个[0.0, 1.0)之间的随机小数</td></tr><tr><td>randint(a, b)</td><td>生成一个[a,b]之间的整数</td></tr><tr><td>getrandbits(k)</td><td>生成一个k比特长度的随机整数</td></tr><tr><td>randrange(start, stop[, step])</td><td>生成一个[start, stop)之间以step为步数的随机整数</td></tr><tr><td>uniform(a, b)</td><td>生成一个[a, b]之间的随机小数</td></tr><tr><td>choice(seq)</td><td>从序列类型(例如：列表)中随机返回一个元素</td></tr><tr><td>shuffle(seq)</td><td>将序列类型中元素随机排列，返回打乱后的序列</td></tr><tr><td>sample(pop, k)</td><td>从pop类型中随机选取k个元素，以列表类型返回</td></tr></tbody></table><h2 id="9-3-time库"><a href="#9-3-time库" class="headerlink" title="9.3 time库"></a>9.3 time库</h2><h3 id="9-3-1time库概述"><a href="#9-3-1time库概述" class="headerlink" title="9.3.1time库概述"></a>9.3.1time库概述</h3><p>处理时间是程序最常用的功能之一，time库是Python提供的处理时间标准库。time库提供系统级精确计时器的计时功能，可以用来分析程序性能也可让程序暂停运行时间。<br></p><p>time库的功能主要分为3个方面：<strong>时间处理</strong>、<strong>时间格式化</strong>和<strong>计时</strong>。</p><h3 id="9-3-2-时间处理函数"><a href="#9-3-2-时间处理函数" class="headerlink" title="9.3.2 时间处理函数"></a>9.3.2 时间处理函数</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>time.time( )</td><td>获取当前时间戳</td></tr><tr><td>time.gmtime()</td><td>获取当前时间戳对应的struct_time对象</td></tr><tr><td>time.localtime()</td><td>获取当前时间戳对应的本地时间的struct_time对象</td></tr><tr><td>time.ctime()</td><td>获取当前时间戳对应的易读字符串表示，内部会调用time.localtime()函数以输出当地时间。</td></tr></tbody></table><h3 id="9-3-3-时间格式化函数"><a href="#9-3-3-时间格式化函数" class="headerlink" title="9.3.3 时间格式化函数"></a>9.3.3 时间格式化函数</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>time.mktime()</td><td>将struct_time对象t转换为时间戳，注意t代表当地时间。</td></tr><tr><td>time.strftime()</td><td>时间格式化最有效的方法，几乎可以以任何通用格式输出时间。该方法利用一个格式字符串，对时间格式进行表达。</td></tr><tr><td>time.strptime()</td><td>法与strftime()方法完全相反，用于提取字符串中时间来生成strut_time对象，可以很灵活的作为time模块的输入接口</td></tr></tbody></table><ul><li>使用<strong>time.mktime(t)</strong> 将struct_time对象t转换为时间戳，注意t表当地时间。struct_time对象的元素如下</li></ul><table><thead><tr><th>下标</th><th>属性</th><th>值</th></tr></thead><tbody><tr><td>0</td><td>tm_year</td><td>年份，整数</td></tr><tr><td>1</td><td>tm_mon</td><td>月份[1, 12]</td></tr><tr><td>2</td><td>tm_mday</td><td>日期[1, 31]</td></tr><tr><td>3</td><td>tm_hour</td><td>小时[0, 23]</td></tr><tr><td>4</td><td>tm_min</td><td>分钟[0, 59]</td></tr><tr><td>5</td><td>tm_sec</td><td>秒[0, 61]</td></tr><tr><td>6</td><td>tm_wday</td><td>星期[0, 6]（0表示星期一）</td></tr><tr><td>7</td><td>tm_yday</td><td>该年第几天[1, 366]</td></tr><tr><td>8</td><td>tm_isdst</td><td>是否夏时令，0否, 1是, -1未</td></tr></tbody></table><ul><li>**strftime()**方法的格式化控制符</li></ul><table><thead><tr><th>格式化字符串</th><th>日期/时间</th><th>值范围和实例</th></tr></thead><tbody><tr><td>%Y</td><td>年份</td><td>0001~9999，例如：1900</td></tr><tr><td>%m</td><td>月份</td><td>01~12，例如：10</td></tr><tr><td>%B</td><td>月名</td><td>January~December，例如：April</td></tr><tr><td>%b</td><td>月名缩写</td><td>Jan~Dec，例如：Apr</td></tr><tr><td>%d</td><td>日期</td><td>01 ~ 31，例如：25</td></tr><tr><td>%A</td><td>星期</td><td>Monday~Sunday，例如：Wednesday</td></tr><tr><td>%a</td><td>星期缩写</td><td>Mon~Sun，例如：Wed</td></tr><tr><td>%H</td><td>小时（24h制）</td><td>00 ~ 23，例如：12</td></tr><tr><td>%I</td><td>小时（12h制）</td><td>01 ~ 12，例如：7</td></tr><tr><td>%p</td><td>上/下午</td><td>AM, PM，例如：PM</td></tr><tr><td>%M</td><td>分钟</td><td>00 ~ 59，例如：26</td></tr><tr><td>%S</td><td>秒</td><td>00 ~ 59，例如：26</td></tr></tbody></table><h3 id="9-3-4-计时"><a href="#9-3-4-计时" class="headerlink" title="9.3.4 计时"></a>9.3.4 计时</h3><p>程序计时是非常常用的功能，尤其是对于运行时间较长的程序，往往需要先进行小规模（短时间）的实验，并根据实验结果预估最终程序的大致运行时间。<br><br>程序计时主要要包含三个要素：程序开始/结束时间、程序运行总时间、程序各核心模块运行时间。<br><br><br>time模块里的计时函数：</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>time.sleep( )</td><td></td></tr><tr><td>time.monotonic()</td><td></td></tr><tr><td>time.perf_counter()</td><td></td></tr></tbody></table><p>以1千万次循环为主体，模拟实际程序的核心模块，用time.sleep()来模拟实际程序的其他模块。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">def coreLoop():</span><br><span class="line">  limit = 10**8</span><br><span class="line">  while (limit &gt; 0):</span><br><span class="line">    limit -= 1</span><br><span class="line">def otherLoop1():</span><br><span class="line">  time.sleep(0.2)</span><br><span class="line">def otherLoop2():</span><br><span class="line">  time.sleep(0.4)</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">  startTime = time.localtime()</span><br><span class="line">  print(&#x27;程序开始时间：&#x27;, time.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;, startTime))</span><br><span class="line">  startPerfCounter = time.perf_counter()</span><br><span class="line">  otherLoop1()</span><br><span class="line">  otherLoop1PerfCounter = time.perf_counter()</span><br><span class="line">  otherLoop1Perf = otherLoop1PerfCounter - startPerfCounter</span><br><span class="line">  coreLoop()</span><br><span class="line">  coreLoopPerfCounter = time.perf_counter()</span><br><span class="line">  coreLoopPerf = coreLoopPerfCounter - otherLoop1PerfCounter</span><br><span class="line">  otherLoop2()</span><br><span class="line">  otherLoop2PerfCounter = time.perf_counter()</span><br><span class="line">  otherLoop2Perf = otherLoop2PerfCounter - coreLoopPerfCounter</span><br><span class="line">  endPerfCounter = time.perf_counter()</span><br><span class="line">  totalPerf = endPerfCounter - startPerfCounter</span><br><span class="line">  endTime = time.localtime()</span><br><span class="line">  print(&quot;模块1运行时间是:&#123;&#125;秒&quot;.format(otherLoop1Perf))</span><br><span class="line">  print(&quot;核心模块运行时间是:&#123;&#125;秒&quot;.format(coreLoopPerf))</span><br><span class="line">  print(&quot;模块2运行时间是:&#123;&#125;秒&quot;.format(otherLoop2Perf))</span><br><span class="line">  print(&quot;程序运行总时间是:&#123;&#125;秒&quot;.format(totalPerf))</span><br><span class="line">  print(&#x27;程序结束时间：&#x27;, time.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;, endTime))</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>程序运行的输出效果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">程序开始时间： 2017-12-26 13:46:39</span><br><span class="line">模块1运行时间是:0.20003105182731706秒</span><br><span class="line">核心模块运行时间是:5.987101639820927秒</span><br><span class="line">模块2运行时间是:0.40018931343066555秒</span><br><span class="line">程序运行总时间是:6.587323585324574秒</span><br><span class="line">程序结束时间： 2017-12-26 13:46:4</span><br></pre></td></tr></table></figure><h2 id="9-4-实例解析：雪景艺术绘图"><a href="#9-4-实例解析：雪景艺术绘图" class="headerlink" title="9.4 实例解析：雪景艺术绘图"></a>9.4 实例解析：雪景艺术绘图</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;Python标准库概览&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://aike505.github.io/categories/Python/"/>
    
    <category term="二级" scheme="https://aike505.github.io/categories/Python/%E4%BA%8C%E7%BA%A7/"/>
    
    
    <category term="Python" scheme="https://aike505.github.io/tags/Python/"/>
    
    <category term="二级" scheme="https://aike505.github.io/tags/%E4%BA%8C%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>8.Python计算生态</title>
    <link href="https://aike505.github.io/2021/09/05/8-Python%E8%AE%A1%E7%AE%97%E7%94%9F%E6%80%81/"/>
    <id>https://aike505.github.io/2021/09/05/8-Python%E8%AE%A1%E7%AE%97%E7%94%9F%E6%80%81/</id>
    <published>2021-09-05T02:07:23.000Z</published>
    <updated>2021-09-06T06:04:35.755Z</updated>
    
    <content type="html"><![CDATA[<p>Python计算生态</p><span id="more"></span><h1 id="8-Python计算生态"><a href="#8-Python计算生态" class="headerlink" title="8.Python计算生态"></a>8.Python计算生态</h1><ul><li>思维导图<br><img src="https://cdn.jsdelivr.net/gh/Aike505/ImgHosting/Aike505-PIC/2021.9.5_8.Python%E8%AE%A1%E7%AE%97%E7%94%9F%E6%80%81.png"></li></ul><h2 id="8-1计算思维"><a href="#8-1计算思维" class="headerlink" title="8.1计算思维"></a>8.1计算思维</h2><p>人类在认识世界、改造世界过程中表现出<em>三种基本的思维特征</em>：以实验和验证为特征的<strong>实证思维</strong> ，以物理学科为代表；以推理和演绎为特征的<strong>逻辑思维</strong>，以数学学科为代表；以设计和构造为特征的<strong>计算思维</strong>，以计算机学科为代表。<br><br>计算思维的本质是<strong>抽象</strong>（Abstraction）和<strong>自动化</strong>（Automation）</p><h2 id="8-2程序设计方法"><a href="#8-2程序设计方法" class="headerlink" title="8.2程序设计方法"></a>8.2程序设计方法</h2><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>自顶而下的设计</td><td>一个解决复杂问题行之有效的方法,基本思想是以一个总问题开始，试图把它表达为很多小问题组成的解决方案。再用同样的技术依次攻破每个小问题，最终问题变得非常小，以至于可以很容易解决。然后只需把所有的碎片组合起来，就可以得到一个程序。</td></tr><tr><td>自底向上执行</td><td>开展测试的更好办法也是将程序分成小部分逐个测试执行中等规模程序的最好方法是从结构图最底层开始，而不是从顶部开始，然后逐步上升。或者说，先运行和测试每一个基本函数，再测试由基础函数组成的整体函数，这样有助于定位错误</td></tr></tbody></table><h2 id="8-3Python标准库"><a href="#8-3Python标准库" class="headerlink" title="8.3Python标准库"></a>8.3Python标准库</h2><p>有一部分Python计算生态随Python安装包一起发布，用户可以随时使用，被称为Python标准库。<br><br>受限于Python安装包的设定大小，标准库数量270个左右。</p><h2 id="8-4Python第三方库"><a href="#8-4Python第三方库" class="headerlink" title="8.4Python第三方库"></a>8.4Python第三方库</h2><p>更广泛的Python计算生态采用额外安装方式服务用户，被称为Python第三方库。这些第三方库由全球各行业专家、工程师和爱好者开发，没有顶层设计，由开发者采用“尽力而为”的方式维护。Python通过新一代安装工具pip管理大部分Python第三方库的安装。</p><h2 id="8-5基本的Python内置函数"><a href="#8-5基本的Python内置函数" class="headerlink" title="8.5基本的Python内置函数"></a>8.5基本的Python内置函数</h2><p>Python解释器提供了68个内置函数（下面介绍32个）</p><table><thead><tr><th>函数名称</th><th>函数说明</th></tr></thead><tbody><tr><td>abs(x)</td><td>x的绝对值<br>如果x是复数，返回复数的模</td></tr><tr><td>all(x)</td><td>组合类型变量x中所有元素都为真时返回True，否则返回False；若x为空，返回True</td></tr><tr><td>any(x)</td><td>组合类型变量x中任一元素都为真时返回True，否则返回False；若x为空，返回False</td></tr><tr><td>bin(x)</td><td>将整数x转换为等值的二进制字符串</td></tr><tr><td>bin(1010)</td><td>的结果是’0b1111110010’</td></tr><tr><td>bool(x)</td><td>将x转换为Boolean类型，即True或False<br>bool(‘’) 的结果是False</td></tr><tr><td>chr(i)</td><td>返回Unicode为i的字符<br>chr(9996)的结果是’✌ ‘</td></tr><tr><td>complex(r,i)</td><td>创建一个复数 r + i*1j，其中i可以省略<br>complex(10,10)的结果是10+10j</td></tr><tr><td>dict()</td><td>创建字典类型<br>dict()的结果是一个空字典{}</td></tr><tr><td>divmod(a,b)</td><td>返回a和b的商及余数<br>divmod(10,3)结果是一个(3,1)</td></tr><tr><td>eval(s)</td><td>计算字符串s作为Python表达式的值<br>eval(‘1+99’)的结果是100</td></tr><tr><td>exec(s)</td><td>计算字符串s作为Python语句的值<br>exec(‘a = 1+999’)运行后，变量a的值为1000</td></tr><tr><td>float(x)</td><td>将x转换成浮点数<br>float(1010)的结果是1010.0</td></tr><tr><td>hex(x)</td><td>将整数转换为16进制字符串<br>hex(1010)的结果是’0x3f2’</td></tr><tr><td>input(s)</td><td>获取用户输入，其中s是字符串，作为提示信息<br>s可选</td></tr><tr><td>int(x)</td><td>将x转换成整数<br>int(9.9)的结果是9</td></tr><tr><td>list(x)</td><td>创建或将变量x转换成一个列表类型<br>list({10,9,8})的结果是[8,9,10]</td></tr><tr><td>max(a1,a2,…)</td><td>返回参数的最大值<br>max(1,2,3,4,5)的结果是5</td></tr><tr><td>min(a1,a2,…)</td><td>返回参数的最小值<br>min(1,2,3,4,5)的结果是1</td></tr><tr><td>oct(x)</td><td>将整数x转换成等值的八进制字符串形式<br>oct(1010)的结果是’0o1762’</td></tr><tr><td>open(fname, m)</td><td>打开文件，包括文本方式和二进制方式等<br>其中，m部分可以省略，默认是以文本可读形式打开</td></tr><tr><td>ord(c)</td><td>返回一个字符的Unicode编码值<br>ord(‘字’)的结果是23383</td></tr><tr><td>pow(x,y)</td><td>返回x的y次幂<br>pow(2,pow(2,2))的结果是16</td></tr><tr><td>print(x)</td><td>打印变量或字符串x<br>print()的end参数用来表示输出的结尾字符</td></tr><tr><td>range(a,b,s)</td><td>从a到b(不含)以s为步长产生一个序列<br>list(range(1,10,3))的结果是[1, 4, 7]</td></tr><tr><td>reversed(r)</td><td>返回组合类型r的逆序迭代形式<br>for i in reversed([1,2,3])将逆序遍历列表</td></tr><tr><td>round(n)</td><td>四舍五入方式计算n<br>round(10.6)的结果是11</td></tr><tr><td>set(x)</td><td>将组合数据类型x转换成集合类型<br>set([1,1,1,1])的结果是{1}</td></tr><tr><td>sorted(x)</td><td>对组合数据类型x进行排序，默认从小到大<br>sorted([1,3,5,2,4])的结果是[1,2,3,4,5]</td></tr><tr><td>str(x)</td><td>将x转换为等值的字符串类型<br>str(0x1010)的结果是’4112’</td></tr><tr><td>sum(x)</td><td>对组合数据类型x计算求和结果<br>sum([1,3,5,2,4])的结果是15</td></tr><tr><td>type(x)</td><td>返回变量x的数据类型<br>type({1:2})的结果是&lt;class&nbsp;’dict’&gt;</td></tr></tbody></table><h2 id="8-5实例解析：Web页面元素提取"><a href="#8-5实例解析：Web页面元素提取" class="headerlink" title="8.5实例解析：Web页面元素提取"></a>8.5实例解析：Web页面元素提取</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;Python计算生态&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://aike505.github.io/categories/Python/"/>
    
    <category term="二级" scheme="https://aike505.github.io/categories/Python/%E4%BA%8C%E7%BA%A7/"/>
    
    
    <category term="Python" scheme="https://aike505.github.io/tags/Python/"/>
    
    <category term="二级" scheme="https://aike505.github.io/tags/%E4%BA%8C%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>7.文件和数据格式化</title>
    <link href="https://aike505.github.io/2021/09/05/7-%E6%96%87%E4%BB%B6%E5%92%8C%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
    <id>https://aike505.github.io/2021/09/05/7-%E6%96%87%E4%BB%B6%E5%92%8C%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E5%8C%96/</id>
    <published>2021-09-05T02:07:09.000Z</published>
    <updated>2021-09-24T15:38:27.579Z</updated>
    
    <content type="html"><![CDATA[<p>文件和数据格式化</p><span id="more"></span><h1 id="7-文件和数据格式化"><a href="#7-文件和数据格式化" class="headerlink" title="7.文件和数据格式化"></a>7.文件和数据格式化</h1><ul><li>思维导图<br><img src="https://cdn.jsdelivr.net/gh/Aike505/ImgHosting/Aike505-PIC/2021.9.5_7.%E6%96%87%E4%BB%B6%E5%92%8C%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E5%8C%96.png"></li></ul><h2 id="7-1文件类型"><a href="#7-1文件类型" class="headerlink" title="7.1文件类型"></a>7.1文件类型</h2><table><thead><tr><th>类型</th><th>含义</th></tr></thead><tbody><tr><td>文本文件</td><td>文本文件一般由单一特定编码的字符组成，如UTF-8编码，内容容易统一展示和阅读。</td></tr><tr><td>二进制</td><td>二进制文件直接由比特0和比特1组成，文件内部数据的组织格式与文件用途有关。二进制是信息按照非字符但特定格式形成的文件，如，png格式的图片文件、avi格式的视频文件。</td></tr></tbody></table><p>二进制文件和文本文件最主要的区别在于是否有统一的字符编码。</p><blockquote><p>Python对文本文件和二进制文件采用统一的操作步骤，即“<strong>打开-操作-关闭</strong>”</p></blockquote><h2 id="7-2文件的使用"><a href="#7-2文件的使用" class="headerlink" title="7.2文件的使用"></a>7.2文件的使用</h2><h3 id="7-2-1文件的打开"><a href="#7-2-1文件的打开" class="headerlink" title="7.2.1文件的打开"></a>7.2.1文件的打开</h3><p>Python通过open()函数打开一个文件，并返回一个操作这个文件的变量，语法形式如下：<br><br>&lt;变量名&gt; = open(&lt;文件路径及文件名&gt;, &lt;打开模式&gt;)</p><table><thead><tr><th>打开模式</th><th>含义</th></tr></thead><tbody><tr><td>‘r’</td><td>只读模式，如果文件不存在，返回异常FileNotFoundError，默认值</td></tr><tr><td>‘w’</td><td>覆盖写模式，文件不存在则创建，存在则完全覆盖源文件</td></tr><tr><td>‘x’</td><td>创建写模式，文件不存在则创建，存在则返回异FileExistsError ‘a’</td></tr><tr><td>‘b’</td><td>二进制文件模式</td></tr><tr><td>‘t’</td><td>文本文件模式，默认值</td></tr><tr><td>‘+’</td><td>与r/w/x/a一同使用，在原功能基础上增加同时读写功能</td></tr></tbody></table><h3 id="7-2-2文件的关闭"><a href="#7-2-2文件的关闭" class="headerlink" title="7.2.2文件的关闭"></a>7.2.2文件的关闭</h3><p>&lt;变量名&gt;.close()</p><h3 id="7-2-3文件的读"><a href="#7-2-3文件的读" class="headerlink" title="7.2.3文件的读"></a>7.2.3文件的读</h3><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>f.read(size=-1)</td><td>从文件中读入整个文件内容。参数可选，如果给出，读入前size长度的字符串或字节流</td></tr><tr><td>f.readline(size = -1)</td><td>从文件中读入一行内容。参数可选，如果给出，读入该行前size长度的字符串或字节流</td></tr><tr><td>f.readlines(hint=-1)</td><td>从文件中读入所有行，以每行为元素形成一个列表。参数可选，如果给出，读入hint行</td></tr><tr><td>f.seek(offset)</td><td>改变当前文件操作指针的位置，offset的值：0：文件开头； 2: 文件结尾</td></tr></tbody></table><p>f = open(&lt;文件路径及名称&gt;,”r”)<br><br>for line in f:<br><br><code># 处理一行数据</code><br><br>f.close()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">f = open(&quot;D://b.txt&quot;, &quot;r&quot;)</span><br><span class="line">for line in f:</span><br><span class="line">    print(line)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">&gt;&gt;</span><br><span class="line">新年都未有芳华，二月初惊见草芽。</span><br><span class="line"></span><br><span class="line">白雪却嫌春色晚，故穿庭树作飞花。</span><br></pre></td></tr></table></figure><h3 id="7-2-4文件的写"><a href="#7-2-4文件的写" class="headerlink" title="7.2.4文件的写"></a>7.2.4文件的写</h3><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>f.write(s)</td><td>向文件写入一个字符串或字节流</td></tr><tr><td>f.writelines(lines)</td><td>将一个元素为字符串的列表写入文件</td></tr></tbody></table><p><strong>f.write(s)</strong>  向文件写入字符串s，每次写入后，将会记录一个写入指针。该方法可以反复调用，将在写入指针后分批写入内容，直至文件被关闭。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;f = open(&quot;D://c.txt&quot;, &quot;w&quot;)</span><br><span class="line">&gt;&gt;&gt;f.write(&#x27;新年都未有芳华\n&#x27;)</span><br><span class="line">&gt;&gt;&gt;f.write(&#x27;二月初惊见草芽\n&#x27;)</span><br><span class="line">&gt;&gt;&gt;f.write(&#x27;白雪却嫌春色晚\n&#x27;)</span><br><span class="line">&gt;&gt;&gt;f.write(&#x27;故穿庭树作飞花\n&#x27;)</span><br><span class="line">&gt;&gt;&gt;f.close()</span><br><span class="line"></span><br><span class="line">&gt;&gt;</span><br><span class="line">新年都未有芳华</span><br><span class="line">二月初惊见草芽</span><br><span class="line">白雪却嫌春色晚</span><br><span class="line">故穿庭树作飞花</span><br></pre></td></tr></table></figure><p><strong>f.writelines(lines)</strong> 直接将列表类型的各元素连接起来写入文件f。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;ls = [&#x27;新年都未有芳华\n&#x27;,&#x27;二月初惊见草芽\n&#x27;,&#x27;白雪却嫌春色晚\n&#x27;,&#x27;故穿庭树作飞花\n&#x27;]</span><br><span class="line">&gt;&gt;&gt;f = open(&quot;D://c.txt&quot;, &quot;w&quot;)</span><br><span class="line">&gt;&gt;&gt;f.writelines(ls)</span><br><span class="line">&gt;&gt;&gt;f.close()</span><br></pre></td></tr></table></figure><h2 id="7-3数据的维度"><a href="#7-3数据的维度" class="headerlink" title="7.3数据的维度"></a>7.3数据的维度</h2><p>一维数据由对等关系的有序或无序数据构成，采用线性方式组织，对应于数学中数组的概念。<br></p><ul><li>一维数据<blockquote><p>北京、上海、天津、重庆</p></blockquote></li></ul><p>二维数据，也称表格数据，由关联关系数据构成，采用二维表格方式组织，对应于数学中的矩阵，常见的表格都属于二维数据。<br><br>高维数据由键值对类型的数据构成，采用对象方式组织，可以多层嵌套。<br></p><ul><li><p>二维数据<br><img src="https://cdn.jsdelivr.net/gh/Aike505/ImgHosting/Aike505-PIC/2021.9.5_7.%E6%96%87%E4%BB%B6%E5%92%8C%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E5%8C%96_1.png"></p></li><li><p>高维数据<br><img src="https://cdn.jsdelivr.net/gh/Aike505/ImgHosting/Aike505-PIC/2021.9.5_7.%E6%96%87%E4%BB%B6%E5%92%8C%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E5%8C%96_2.png"></p></li></ul><p>一维数据的存储</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>采用空格分隔元素</td><td>例如：<br>北京 上海 天津 重庆</td></tr><tr><td>采用逗号分隔元素</td><td>例如：<br>北京,上海,天津,重庆</td></tr><tr><td>采用换行分隔包括</td><td>例如：<br>北京<br>上海<br>天津<br>重庆</td></tr><tr><td>其他特殊符号分隔，以分号分隔为例</td><td>例如：<br>北京;上海;天津;重庆</td></tr></tbody></table><h2 id="7-4实例解析：国家财政数据趋势演算"><a href="#7-4实例解析：国家财政数据趋势演算" class="headerlink" title="7.4实例解析：国家财政数据趋势演算"></a>7.4实例解析：国家财政数据趋势演算</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;文件和数据格式化&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://aike505.github.io/categories/Python/"/>
    
    <category term="二级" scheme="https://aike505.github.io/categories/Python/%E4%BA%8C%E7%BA%A7/"/>
    
    
    <category term="Python" scheme="https://aike505.github.io/tags/Python/"/>
    
    <category term="二级" scheme="https://aike505.github.io/tags/%E4%BA%8C%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>6.组合数据类型</title>
    <link href="https://aike505.github.io/2021/09/05/6-%E7%BB%84%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://aike505.github.io/2021/09/05/6-%E7%BB%84%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2021-09-05T02:06:50.000Z</published>
    <updated>2021-09-24T03:47:51.040Z</updated>
    
    <content type="html"><![CDATA[<p>组合数据类型</p><span id="more"></span><h1 id="6-组合数据类型"><a href="#6-组合数据类型" class="headerlink" title="6.组合数据类型"></a>6.组合数据类型</h1><ul><li>思维导图<br><img src="https://cdn.jsdelivr.net/gh/Aike505/ImgHosting/Aike505-PIC/2021.9.5_6.%E7%BB%84%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png"></li></ul><h2 id="6-1集合"><a href="#6-1集合" class="headerlink" title="6.1集合"></a>6.1集合</h2><p>集合类型是一个元素集合，元素之间无序，相同元素在<br>集合中唯一存在。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;S = &#123;1010, &quot;1010&quot;, 78.9&#125;</span><br><span class="line">&gt;&gt;&gt;type(S)</span><br><span class="line">&lt;class &#x27;set&#x27;&gt;</span><br><span class="line">&gt;&gt;&gt;len(S)</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt;print(S)</span><br><span class="line">&#123;78.9, 1010,&#x27;1010&#x27;&#125;</span><br></pre></td></tr></table></figure><p>集合类型的操作符</p><table><thead><tr><th>操作符的运算</th><th>描述</th></tr></thead><tbody><tr><td>S – T</td><td>返回一个新集合，包括在集合S中但不在集合T中的元素</td></tr><tr><td>S &amp; T</td><td>返回一个新集合，包括同时在集合S和T中的元素</td></tr><tr><td>S^T</td><td>返回一个新集合，包括集合S和T中非共同元素</td></tr><tr><td>S∣T</td><td>返回一个新集合，包括集合S和T中所有元素</td></tr></tbody></table><ul><li>图例<br><img src="https://cdn.jsdelivr.net/gh/Aike505/ImgHosting/Aike505-PIC/2021.9.5_6.%E7%BB%84%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B_1.png"><br><img src="https://cdn.jsdelivr.net/gh/Aike505/ImgHosting/Aike505-PIC/2021.9.5_6.%E7%BB%84%E5%90%88%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B_2.png"></li></ul><p>集合类型常用的操作函数和方法</p><table><thead><tr><th>函数或方法</th><th>描述</th></tr></thead><tbody><tr><td>S.add(x)</td><td>如果数据项x不在集合S中，将x增加到s</td></tr><tr><td>S.remove(x)</td><td>如果x在集合S中，移除该元素；不在产生KeyError</td></tr><tr><td>S.clear()</td><td>移除S中所有数据项</td></tr><tr><td>len(S)</td><td>返回集合S元素个数</td></tr><tr><td>x in S</td><td>如果x是S的元素，返回True，否则返回False</td></tr><tr><td>x not in S</td><td>如果x不是S的元素，返回True，否则返回False</td></tr></tbody></table><h2 id="6-2列表"><a href="#6-2列表" class="headerlink" title="6.2列表"></a>6.2列表</h2><h3 id="6-2-1列表定义"><a href="#6-2-1列表定义" class="headerlink" title="6.2.1列表定义"></a>6.2.1列表定义</h3><p>列表是包含0个或多个元组组成的有序序列，属于序列类型。列表可以元素进行增加、删除、替换、查找等操作。列表没有长度限制，元素类型可以不同，不需要预定义长度。<br><br>列表类型用中括号[]表示，也可以通过list(x)函数将集合或字符串类型转换成列表类型。</p><h3 id="6-2-2列表的操作函数"><a href="#6-2-2列表的操作函数" class="headerlink" title="6.2.2列表的操作函数"></a>6.2.2列表的操作函数</h3><table><thead><tr><th>操作函数</th><th>描述</th></tr></thead><tbody><tr><td>len(ls)</td><td>列表ls的元素个数（长度）</td></tr><tr><td>min(ls)</td><td>列表ls中的最小元素</td></tr><tr><td>max(ls)</td><td>列表ls中的最大元素</td></tr><tr><td>list(x)</td><td>将x转变成列表类型</td></tr></tbody></table><h3 id="6-2-3列表的操作方法"><a href="#6-2-3列表的操作方法" class="headerlink" title="6.2.3列表的操作方法"></a>6.2.3列表的操作方法</h3><p>语法形式是：<code>&lt;列表变量&gt;.&lt;方法名称&gt;(&lt;方法参数&gt;)</code></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>ls.append(x)</td><td>在列表ls最后增加一个元素x</td></tr><tr><td>ls.insert(i, x)</td><td>在列表ls第i位置增加元素x</td></tr><tr><td>ls.clear()</td><td>删除ls中所有元素</td></tr><tr><td>ls.pop(i)</td><td>将列表ls中第i项元素取出并删除该元素</td></tr><tr><td>ls.remove(x)</td><td>将列表中出现的第一个元素x删除</td></tr><tr><td>ls.reverse()</td><td>列表ls中元素反转</td></tr><tr><td>ls.copy()</td><td>生成一个新列表，复制ls中所有元素</td></tr></tbody></table><h3 id="6-2-4列表的删除操作"><a href="#6-2-4列表的删除操作" class="headerlink" title="6.2.4列表的删除操作"></a>6.2.4列表的删除操作</h3><p>del &lt;列表变量&gt;[&lt;索引序号&gt;] 或 <br><br>del &lt;列表变量&gt;[&lt;索引起始&gt;: &lt;索引结束&gt;]</p><h2 id="6-3字典"><a href="#6-3字典" class="headerlink" title="6.3字典"></a>6.3字典</h2><h3 id="6-3-1字典定义"><a href="#6-3-1字典定义" class="headerlink" title="6.3.1字典定义"></a>6.3.1字典定义</h3><p>Python语言中的字典使用大括号{}建立，每个元<br>素是一个键值对，使用方式如下：{&lt;键1&gt;:&lt;值1&gt;, &lt;键2&gt;:&lt;值2&gt;, … , &lt;键n&gt;:&lt;值n&gt;}</p><h3 id="6-3-2字典索引"><a href="#6-3-2字典索引" class="headerlink" title="6.3.2字典索引"></a>6.3.2字典索引</h3><p>字典中键值对的索引模式如下，采用中括号格式：<br><br>&lt;值&gt; = &lt;字典变量&gt;[&lt;键&gt;]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;d = &#123;&quot;201801&quot;:&quot;小明&quot;,&quot;201802&quot;:&quot;小红&quot;&quot;201803&quot;:&quot;小白&quot;&#125;</span><br><span class="line">&gt;&gt;&gt;d[&quot;201802&quot;] = &#x27;新小红&#x27;</span><br><span class="line">&gt;&gt;&gt;print(d)</span><br><span class="line">&#123;&#x27;201801&#x27;: &#x27;小明&#x27;,&#x27;201803&#x27;: &#x27;小白&#x27;,&#x27;201802&#x27;: &#x27;新小红&#x27;</span><br></pre></td></tr></table></figure><h3 id="6-3-3字典的操作函数"><a href="#6-3-3字典的操作函数" class="headerlink" title="6.3.3字典的操作函数"></a>6.3.3字典的操作函数</h3><table><thead><tr><th>操作函数</th><th>描述</th></tr></thead><tbody><tr><td>len(d)</td><td>字典d的元素个数（长度）</td></tr><tr><td>min(d)</td><td>字典d中键的最小值</td></tr><tr><td>max(d)</td><td>字典d中键的最大值</td></tr><tr><td>dict()</td><td>生成一个空字典</td></tr></tbody></table><h3 id="6-3-4字典的操作方法"><a href="#6-3-4字典的操作方法" class="headerlink" title="6.3.4字典的操作方法"></a>6.3.4字典的操作方法</h3><p>字典类型存在一些操作方法，使用语法形式是：<br><br>&lt;字典变量&gt;.&lt;方法名称&gt;(&lt;方法参数&gt;)</p><table><thead><tr><th>操作方法</th><th>描述</th></tr></thead><tbody><tr><td>d.keys()</td><td>返回所有的键信息</td></tr><tr><td>d.values()</td><td>返回所有的值信息</td></tr><tr><td>d.items()</td><td>返回所有的键值对</td></tr><tr><td>d.get(key, default)</td><td>键存在则返回相应值，否则返回默认值</td></tr><tr><td>d.pop(key, default)</td><td>键存在则返回相应值，同时删除键值对，否则返回默认值</td></tr><tr><td>d.popitem()</td><td>随机从字典中取出一个键值对，以元组(key, value)形式返回</td></tr><tr><td>d.clear()</td><td>删除所有的键值对</td></tr></tbody></table><p>此外，如果希望删除字典中某一个元素，可以使用Python保留字<strong>del</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;d = &#123;&quot;201801&quot;:&quot;小明&quot;, &quot;201802&quot;:&quot;小红&quot;, &quot;201803&quot;:&quot;小白&quot;&#125;</span><br><span class="line">&gt;&gt;&gt;del d[&quot;201801&quot;]</span><br><span class="line">&gt;&gt;&gt;print(d)</span><br><span class="line">&#123;&#x27;201802&#x27;: &#x27;小红&#x27;, &#x27;201803&#x27;: &#x27;小白&#x27;&#125;</span><br></pre></td></tr></table></figure><p>字典类型也支持保留字<strong>in</strong>，用来判断一个键是否在字典中。如果在则返回True，否则返回False。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;d = &#123;&quot;201801&quot;:&quot;小明&quot;, &quot;201802&quot;:&quot;小红&quot;, &quot;201803&quot;:&quot;小白&quot;&#125;</span><br><span class="line">&gt;&gt;&gt;&quot;201801&quot; in d</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt;&quot;201804&quot; in d</span><br><span class="line">False</span><br></pre></td></tr></table></figure><h3 id="6-3-4字典的遍历"><a href="#6-3-4字典的遍历" class="headerlink" title="6.3.4字典的遍历"></a>6.3.4字典的遍历</h3><p>与其他组合类型一样，字典可以遍历循环对其元素进行遍历，基本语法结构如下：<br><br>for &lt;变量名&gt; in &lt;字典名&gt;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;语句块&gt;</p><h2 id="6-4实例解析：文本词频统计"><a href="#6-4实例解析：文本词频统计" class="headerlink" title="6.4实例解析：文本词频统计"></a>6.4实例解析：文本词频统计</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;组合数据类型&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://aike505.github.io/categories/Python/"/>
    
    <category term="二级" scheme="https://aike505.github.io/categories/Python/%E4%BA%8C%E7%BA%A7/"/>
    
    
    <category term="Python" scheme="https://aike505.github.io/tags/Python/"/>
    
    <category term="二级" scheme="https://aike505.github.io/tags/%E4%BA%8C%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>5.函数和代码复用</title>
    <link href="https://aike505.github.io/2021/09/05/5-%E5%87%BD%E6%95%B0%E5%92%8C%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%94%A8/"/>
    <id>https://aike505.github.io/2021/09/05/5-%E5%87%BD%E6%95%B0%E5%92%8C%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%94%A8/</id>
    <published>2021-09-05T01:58:23.000Z</published>
    <updated>2021-09-24T03:44:25.069Z</updated>
    
    <content type="html"><![CDATA[<p>函数和代码复用</p><span id="more"></span><h1 id="5-函数和代码复用"><a href="#5-函数和代码复用" class="headerlink" title="5.函数和代码复用"></a>5.函数和代码复用</h1><ul><li>思维导图<br><img src="https://cdn.jsdelivr.net/gh/Aike505/ImgHosting/Aike505-PIC/2021.9.5_5.%E5%87%BD%E6%95%B0%E5%92%8C%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%94%A8.png"></li></ul><h2 id="5-1函数的基本使用"><a href="#5-1函数的基本使用" class="headerlink" title="5.1函数的基本使用"></a>5.1函数的基本使用</h2><h3 id="5-1-1函数的定义"><a href="#5-1-1函数的定义" class="headerlink" title="5.1.1函数的定义"></a>5.1.1函数的定义</h3><p>Python定义一个函数使用def保留字，语法形式<br>如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def &lt;函数名&gt;(&lt;参数列表&gt;):</span><br><span class="line">    &lt;函数体&gt;</span><br><span class="line">return &lt;返回值列表&gt;</span><br></pre></td></tr></table></figure><h3 id="5-1-2函数的使用"><a href="#5-1-2函数的使用" class="headerlink" title="5.1.2函数的使用"></a>5.1.2函数的使用</h3><p>&lt;函数名&gt;(&lt;实际赋值参数列表&gt;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 定义一个对整数n求阶乘的函数</span><br><span class="line">def fact(n):</span><br><span class="line">  s = 1</span><br><span class="line">  for i in range(1, n+1):</span><br><span class="line">    s *= i</span><br><span class="line">  return s</span><br><span class="line"># 调用整数阶乘的函数</span><br><span class="line">print(fact(100))</span><br></pre></td></tr></table></figure><p>函数定义-&gt;函数调用-&gt;函数执行-&gt;函数返回</p><h2 id="5-2函数的传递"><a href="#5-2函数的传递" class="headerlink" title="5.2函数的传递"></a>5.2函数的传递</h2><h3 id="5-2-1可选参数传递"><a href="#5-2-1可选参数传递" class="headerlink" title="5.2.1可选参数传递"></a>5.2.1可选参数传递</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def &lt;函数名&gt;(&lt;非可选参数列表&gt;, &lt;可选参数&gt; = &lt;默认值&gt;):</span><br><span class="line">  &lt;函数体&gt;</span><br><span class="line">  return &lt;返回值列表&gt;</span><br></pre></td></tr></table></figure><h3 id="5-2-2参数名称传递"><a href="#5-2-2参数名称传递" class="headerlink" title="5.2.2参数名称传递"></a>5.2.2参数名称传递</h3><p>&lt;函数名&gt;(&lt;参数名&gt; = &lt;实际值&gt;)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;def multiply(x, y = 10):</span><br><span class="line">        print(x*y)</span><br><span class="line">&gt;&gt;&gt;multiply(x = 99)</span><br><span class="line">990</span><br><span class="line">&gt;&gt;&gt;multiply(y = 2, x = 99)</span><br><span class="line">198</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-2-3函数的返回值"><a href="#5-2-3函数的返回值" class="headerlink" title="5.2.3函数的返回值"></a>5.2.3函数的返回值</h3><p>return语句可以出现在函数中的任何部分，同时可以将0个、1个或多个函数运算的结果返回给函数被调用处的变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;def multiply(x, y = 10):</span><br><span class="line">return x*y</span><br><span class="line">&gt;&gt;&gt;s = multiply(99, 2)</span><br><span class="line">&gt;&gt;&gt;print(s)</span><br><span class="line">198</span><br></pre></td></tr></table></figure><h2 id="5-3变量的作用域"><a href="#5-3变量的作用域" class="headerlink" title="5.3变量的作用域"></a>5.3变量的作用域</h2><table><thead><tr><th>变量</th><th>作用域</th></tr></thead><tbody><tr><td>局部变量</td><td>局部变量指在函数内部使用的变量，仅在函数内部有效，当函数退出时变量将不再存在。但可以用global声明在函数内做为全局变量用。</td></tr><tr><td>全局变量</td><td>全局变量指在函数之外定义的变量，在程序执行全过程有效。</td></tr></tbody></table><h2 id="5-4代码复用"><a href="#5-4代码复用" class="headerlink" title="5.4代码复用"></a>5.4代码复用</h2><p>函数封装的直接好处是代码复用，任何其他代码只要输入参数即可调用函数，从而避免相同功能代码在被调用处重复编写。<br><br><strong>模块化设计</strong>是使用函数设计程序的思考方法，以功能块为基本单位，一般有两个基本要求：</p><table><thead><tr><th>方法</th><th>含义</th><th>作用</th></tr></thead><tbody><tr><td>紧耦合</td><td>尽可能合理划分功能块，功能块内部耦合紧密</td><td>紧耦合的缺点在于更新一个模块可能导致其它模块变化，复用较困难。</td></tr><tr><td>松耦合</td><td>模块间关系尽可能简单，功能块之间耦合度低</td><td>松耦合一般基于消息或协议实现，系统间交互简单。</td></tr></tbody></table><h2 id="5-5实例解析——软文的诗词风"><a href="#5-5实例解析——软文的诗词风" class="headerlink" title="5.5实例解析——软文的诗词风"></a>5.5实例解析——软文的诗词风</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;函数和代码复用&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://aike505.github.io/categories/Python/"/>
    
    <category term="二级" scheme="https://aike505.github.io/categories/Python/%E4%BA%8C%E7%BA%A7/"/>
    
    
    <category term="Python" scheme="https://aike505.github.io/tags/Python/"/>
    
    <category term="二级" scheme="https://aike505.github.io/tags/%E4%BA%8C%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>4.程序的控制结构</title>
    <link href="https://aike505.github.io/2021/09/05/4-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/"/>
    <id>https://aike505.github.io/2021/09/05/4-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/</id>
    <published>2021-09-05T01:11:58.000Z</published>
    <updated>2021-09-24T03:33:24.190Z</updated>
    
    <content type="html"><![CDATA[<p>程序的控制结构</p><span id="more"></span><h1 id="4-程序的控制结构"><a href="#4-程序的控制结构" class="headerlink" title="4.程序的控制结构"></a>4.程序的控制结构</h1><ul><li>思维导图<br><img src="https://cdn.jsdelivr.net/gh/Aike505/ImgHosting/Aike505-PIC/2021.9.5_4.%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84.png"><h2 id="4-1顺序结构"><a href="#4-1顺序结构" class="headerlink" title="4.1顺序结构"></a>4.1顺序结构</h2>顺序结构是程序按照线性顺序依次执行的一种运行<br>方式<h2 id="4-2分支结构"><a href="#4-2分支结构" class="headerlink" title="4.2分支结构"></a>4.2分支结构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#单分支结构: if语句</span><br><span class="line">if &lt;条件&gt;:</span><br><span class="line">    语句块</span><br><span class="line"></span><br><span class="line">#二分支结构：if-else</span><br><span class="line">if &lt;条件&gt;:</span><br><span class="line">    &lt;语句块1&gt;</span><br><span class="line">else:</span><br><span class="line">    &lt;语句块2&gt;</span><br><span class="line"></span><br><span class="line">#多分支结构：if-elif-else</span><br><span class="line">if &lt;条件1&gt;:</span><br><span class="line">    &lt;语句块1&gt;</span><br><span class="line">elif &lt;条件2&gt;:</span><br><span class="line">    &lt;语句块2&gt;</span><br><span class="line">... </span><br><span class="line">else:</span><br><span class="line">    &lt;语句块N&gt;</span><br></pre></td></tr></table></figure><h2 id="4-3循环结构"><a href="#4-3循环结构" class="headerlink" title="4.3循环结构"></a>4.3循环结构</h2><h3 id="4-3-1遍历循环-for"><a href="#4-3-1遍历循环-for" class="headerlink" title="4.3.1遍历循环: for"></a>4.3.1遍历循环: for</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for &lt;循环变量&gt; in &lt;遍历结构&gt;:</span><br><span class="line">    &lt;语句块&gt;</span><br></pre></td></tr></table></figure>遍历循环还有一种扩展模式，使用方法如下：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for &lt;循环变量&gt; in &lt;遍历结构&gt;:       </span><br><span class="line">    &lt;语句块1&gt;</span><br><span class="line">else:</span><br><span class="line">    &lt;语句块2&gt;</span><br></pre></td></tr></table></figure>当for循环正常执行之后，程序会继续执行else语句中内容。else语句只在循环正常执行之后才执行并结束，因此，可以在&lt;语句块2&gt;中放置判断循环执行情况的语句。</li></ul><h3 id="4-3-2无限循环-while"><a href="#4-3-2无限循环-while" class="headerlink" title="4.3.2无限循环: while"></a>4.3.2无限循环: while</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">while &lt;条件&gt;:</span><br><span class="line">    &lt;语句块&gt;  </span><br><span class="line"></span><br><span class="line">while &lt;条件&gt;:</span><br><span class="line">    &lt;语句块1&gt;</span><br><span class="line">else:</span><br><span class="line">    &lt;语句块2&gt;  </span><br></pre></td></tr></table></figure><h3 id="4-3-3循环控制-break和continue"><a href="#4-3-3循环控制-break和continue" class="headerlink" title="4.3.3循环控制: break和continue"></a>4.3.3循环控制: break和continue</h3><table><thead><tr><th>语句</th><th>区别</th></tr></thead><tbody><tr><td>continue</td><td>只结束本次循环，不终止整个循环的执行</td></tr><tr><td>break</td><td>具备结束循环的能力</td></tr></tbody></table><h2 id="4-4判断条件组合"><a href="#4-4判断条件组合" class="headerlink" title="4.4判断条件组合"></a>4.4判断条件组合</h2><p>Python关系操作符</p><table><thead><tr><th>操作符</th><th>数学符号</th><th>操作符含义</th></tr></thead><tbody><tr><td>＜</td><td>﹤</td><td>小于</td></tr><tr><td>＜＝</td><td>≤</td><td>小于等于</td></tr><tr><td>＞＝</td><td>≥</td><td>大于等于</td></tr><tr><td>＞</td><td>＞</td><td>大于</td></tr><tr><td>＝＝</td><td>＝</td><td>等于</td></tr><tr><td>！＝</td><td>≠</td><td>不等于</td></tr></tbody></table><p>Python语言使用保留字not、and和or对条件进行逻辑运算或组着。<br><br>保留字not表示单个条件的“否”关系，and表示多个条件之间的“与”关系，保留字or表示多个条件之间的“或”关系。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;not True</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt;a = 80</span><br><span class="line">&gt;&gt;&gt;( a &gt; 100) or ( a &gt; 50 and a &lt; 90)</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h2 id="4-4程序的异常处理"><a href="#4-4程序的异常处理" class="headerlink" title="4.4程序的异常处理"></a>4.4程序的异常处理</h2><p>Python语言使用保留字try和except进行异常处理，基本的语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    &lt;语句块1&gt;</span><br><span class="line">except:</span><br><span class="line">    &lt;语句块2&gt;</span><br></pre></td></tr></table></figure><h2 id="4-5实例解析——猜数字游戏"><a href="#4-5实例解析——猜数字游戏" class="headerlink" title="4.5实例解析——猜数字游戏"></a>4.5实例解析——猜数字游戏</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;程序的控制结构&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://aike505.github.io/categories/Python/"/>
    
    <category term="二级" scheme="https://aike505.github.io/categories/Python/%E4%BA%8C%E7%BA%A7/"/>
    
    
    <category term="Python" scheme="https://aike505.github.io/tags/Python/"/>
    
    <category term="二级" scheme="https://aike505.github.io/tags/%E4%BA%8C%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>3.Python基本数据类型</title>
    <link href="https://aike505.github.io/2021/09/04/3-Python%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB/"/>
    <id>https://aike505.github.io/2021/09/04/3-Python%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB/</id>
    <published>2021-09-04T14:50:44.000Z</published>
    <updated>2021-09-06T06:03:52.615Z</updated>
    
    <content type="html"><![CDATA[<p>Python基本数据类型</p><span id="more"></span><h1 id="3-Python-基本数据类型"><a href="#3-Python-基本数据类型" class="headerlink" title="3.Python 基本数据类型"></a>3.Python 基本数据类型</h1><ul><li>思维导图<br><img src="https://cdn.jsdelivr.net/gh/Aike505/ImgHosting/Aike505-PIC/2021.9.5_3.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png"><h2 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h2><h3 id="3-1-1整数类型"><a href="#3-1-1整数类型" class="headerlink" title="3.1.1整数类型"></a>3.1.1整数类型</h3>整数(int)的4种进制的表示：</li></ul><table><thead><tr><th>进制种类</th><th>引导符号</th><th>描述</th></tr></thead><tbody><tr><td>十进制</td><td>无</td><td>默认情况，例：1010，-1010</td></tr><tr><td>二进制</td><td>ob或oB</td><td>由数字0和1组成，例：0b1010,0B1010</td></tr><tr><td>八进制</td><td>0o或0O</td><td>由数字0到7组成，例：0o1010,0O1010</td></tr><tr><td>十六进制</td><td>0x或0X</td><td>由字符0到9，a到f或A到F组成，例：0x1010,0X1010</td></tr></tbody></table><h3 id="3-1-2浮点类型"><a href="#3-1-2浮点类型" class="headerlink" title="3.1.2浮点类型"></a>3.1.2浮点类型</h3><table><thead><tr><th>类型</th><th>样式</th><th>例子</th></tr></thead><tbody><tr><td>科学计数法</td><td><code>&lt;a&gt;e&lt;b&gt;</code>=a×10<sup>b</sup></td><td>1.23e4=12300</td></tr><tr><td>小数类型</td><td>整数.小数</td><td>0.3</td></tr></tbody></table><h3 id="3-1-3复数类型"><a href="#3-1-3复数类型" class="headerlink" title="3.1.3复数类型"></a>3.1.3复数类型</h3><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>z.real</td><td>取实部</td></tr><tr><td>z.iamg</td><td>取虚部</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; z = 1.23e4+4.56e4j</span><br><span class="line">&gt;&gt;&gt; z.real</span><br><span class="line">12300.0</span><br><span class="line">&gt;&gt;&gt; z.imag</span><br><span class="line">45600.0</span><br><span class="line">&gt;&gt;&gt;1.23e4+5.67e4j.imag # 先获得5.67e4j的虚部，再与1.23e4进行求和计算</span><br><span class="line">69000.0</span><br></pre></td></tr></table></figure><h2 id="3-2数字类型的运算"><a href="#3-2数字类型的运算" class="headerlink" title="3.2数字类型的运算"></a>3.2数字类型的运算</h2><h3 id="3-2-1数值运算操作符"><a href="#3-2-1数值运算操作符" class="headerlink" title="3.2.1数值运算操作符"></a>3.2.1数值运算操作符</h3><p>Python提供了9个运算操作符，如表所示：</p><table><thead><tr><th>操作符及运算</th><th>描述</th></tr></thead><tbody><tr><td>x+y</td><td>x与y的和</td></tr><tr><td>x-y</td><td>x与y的差</td></tr><tr><td>x*y</td><td>x与y的积</td></tr><tr><td>x/y</td><td>x与y的商，产生结果为浮点数</td></tr><tr><td>x//y</td><td>x与y的整数商，即：不大于x与y之商的最大整数</td></tr><tr><td>x%y</td><td>x与y之商的余数，也称为模运算</td></tr><tr><td>-x</td><td>x的负值，即：x*(-1)</td></tr><tr><td>+x</td><td>x本身</td></tr><tr><td>x**y</td><td>x的y次幂，即：x<sup>y</sup></td></tr></tbody></table><p><strong>增强赋值操作符</strong>：+=、-=、*=、/=、//=、%=、**=，用op表示二元运算操作符，增强操作符用法如下：<code>x op= y</code>等价与<code>x = x op y</code></p><h3 id="3-2-2数值运算函数"><a href="#3-2-2数值运算函数" class="headerlink" title="3.2.2数值运算函数"></a>3.2.2数值运算函数</h3><p>内置的数值运算函数：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>abs(x)</td><td>x的绝对值</td></tr><tr><td>divmod(x, y)</td><td>(x//y, x%y)，输出为二元组形式（也称为元组类型）</td></tr><tr><td>pow(x,y)或pow(x,y,z)</td><td><code>(x**y)%z，[..]表示该参数可以省略，即：pow(x,y)，它与x**y相同</code></td></tr><tr><td>round(x)或round(x,d)</td><td>对x四舍五入，保留ndigits位小数。round(x)返回四舍五入的整数值</td></tr><tr><td>max(x1, x2, …, xn)</td><td>x1, x2, …, xn的最大值，n没有限定</td></tr><tr><td>min(x1, x2, …, xn)</td><td>x1, x2, …, xn的最小值，n没有限定</td></tr></tbody></table><h2 id="3-3字符串类型及格式化"><a href="#3-3字符串类型及格式化" class="headerlink" title="3.3字符串类型及格式化"></a>3.3字符串类型及格式化</h2><h3 id="3-3-1字符串的索引"><a href="#3-3-1字符串的索引" class="headerlink" title="3.3.1字符串的索引"></a>3.3.1字符串的索引</h3><p>&lt;字符串或字符串变量&gt;[序号]</p><h3 id="3-3-2字符串的切片"><a href="#3-3-2字符串的切片" class="headerlink" title="3.3.2字符串的切片"></a>3.3.2字符串的切片</h3><p>&lt;字符串或字符串变量&gt;[N: M]</p><h3 id="3-3-3format-的方法的基本使用"><a href="#3-3-3format-的方法的基本使用" class="headerlink" title="3.3.3format()的方法的基本使用"></a>3.3.3format()的方法的基本使用</h3><p>&lt;模板字符串&gt;.format(&lt;逗号分隔的参数&gt;)</p><h3 id="3-3-4format-的方法的格式控制"><a href="#3-3-4format-的方法的格式控制" class="headerlink" title="3.3.4format()的方法的格式控制"></a>3.3.4format()的方法的格式控制</h3><p>{&lt;参数序号&gt;: &lt;格式控制标记&gt;} </p><table><thead><tr><th>:</th><th>&lt;填充&gt;</th><th>&lt;对齐&gt;</th><th>&lt;宽度&gt;</th><th>&lt;,&gt;</th><th>&lt;.精度&gt;</th><th>&lt;类型&gt;</th></tr></thead><tbody><tr><td>引导符号</td><td>用于填充的单个字符</td><td>&lt;左对齐<br>&gt;右对齐<br>^中间对齐</td><td>槽的设定输出宽度</td><td>数字的千位分隔符<br>适用于整数和浮点数</td><td>浮点数小数部分的精度<br>或<br>字符串的最大输出长度</td><td>整数类型b,c,d,o,x,X&lt;<br>浮点数类型e,E,f,%</td></tr></tbody></table><p>格式控制标记包括：&lt;填充&gt;&lt;对齐&gt;&lt;宽度&gt;,&lt;.精度&gt;&lt;类型&gt;6个<br>字段，这些字段都是可选的，可以组合使用</p><ul><li>&lt;填充&gt;、&lt;对齐&gt;和&lt;宽度&gt;主要用于对显示格式的规范。</li><li>&lt;.精度&gt;&lt;类型&gt;主要用于对数值本身的规范</li><li>对于整数类型，输出格式包括6种：<br><br>• b: 输出整数的二进制方式；<br><br>• c: 输出整数对应的Unicode字符；<br><br>• d: 输出整数的十进制方式；<br><br>• o: 输出整数的八进制方式；<br><br>• x: 输出整数的小写十六进制方式；<br><br>• X: 输出整数的大写十六进制方式；<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;&quot;&#123;0:b&#125;,&#123;0:c&#125;,&#123;0:d&#125;,&#123;0:o&#125;,&#123;0:x&#125;,&#123;0:X&#125;&quot;.format(425)</span><br><span class="line">&#x27;110101001,Ʃ,425,651,1a9,1A9&#x27;</span><br></pre></td></tr></table></figure><h2 id="3-4字符串类型的操作"><a href="#3-4字符串类型的操作" class="headerlink" title="3.4字符串类型的操作"></a>3.4字符串类型的操作</h2><h3 id="3-4-1字符串操作符"><a href="#3-4-1字符串操作符" class="headerlink" title="3.4.1字符串操作符"></a>3.4.1字符串操作符</h3>基本的字符串操作符：</li></ul><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>x + y</td><td>连接两个字符串x与y</td></tr><tr><td>x * n 或 n * x</td><td>复制n次字符串x</td></tr><tr><td>x in s</td><td>如果x是s的子串，返回True，否则返回False</td></tr></tbody></table><h3 id="3-4-2字符串处理函数"><a href="#3-4-2字符串处理函数" class="headerlink" title="3.4.2字符串处理函数"></a>3.4.2字符串处理函数</h3><p>字符串处理函数：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>len(x)</td><td>返回字符串x的长度，也可返回其他组合数据类型的元素个数</td></tr><tr><td>str(x)</td><td>返回任意类型x所对应的字符串形式</td></tr><tr><td>chr(x)</td><td>返回Unicode编码x对应的单字符</td></tr><tr><td>ord(x)</td><td>返回单字符x表示的Unicode编码</td></tr><tr><td>hex(x)</td><td>返回整数x对应十六进制数的小写形式字符串</td></tr><tr><td>oct(x)</td><td>返回整数x对应八进制数的小写形式字符串</td></tr></tbody></table><h3 id="3-4-3字符串处理方法"><a href="#3-4-3字符串处理方法" class="headerlink" title="3.4.3字符串处理方法"></a>3.4.3字符串处理方法</h3><p>常用的字符串处理方法</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>str.lower()</td><td>返回字符串str的副本，全部字符小写</td></tr><tr><td>str.upper()</td><td>返回字符串str的副本，全部字符大写</td></tr><tr><td>str.split(sep=None)</td><td>返回一个列表，由str根据sep被分割的部分构成</td></tr><tr><td>str.count(sub)</td><td>返回sub子串出现的次数</td></tr><tr><td>str.replace(old, new)</td><td>返回字符串str的副本，所有old子串被替换为new</td></tr><tr><td>str.center(width, fillchar)</td><td>字符串居中函数，fillchar参数可选</td></tr><tr><td>str.strip(chars)</td><td>从字符串str中去掉在其左侧和右侧chars中列出的字符</td></tr><tr><td>str.join(iter)</td><td>将iter变量的每一个元素后增加一个str字符串</td></tr></tbody></table><h2 id="3-5类型判断和类型转换"><a href="#3-5类型判断和类型转换" class="headerlink" title="3.5类型判断和类型转换"></a>3.5类型判断和类型转换</h2><p>类型判断函数</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>type(x)</td><td>函数对变量x进行类型判断，适用于任何数据类型。</td></tr></tbody></table><p>类型转换函数</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>int(x)</td><td>将x转换为整数，x可以是浮点数或字符串</td></tr><tr><td>float(x)</td><td>将x转换为浮点数，x可以是整数或字符串</td></tr><tr><td>str(x)</td><td>将x转换为字符串，x可以是整数或浮点数</td></tr></tbody></table><h2 id="3-6实例解析——凯撒密码"><a href="#3-6实例解析——凯撒密码" class="headerlink" title="3.6实例解析——凯撒密码"></a>3.6实例解析——凯撒密码</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;Python基本数据类型&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://aike505.github.io/categories/Python/"/>
    
    <category term="二级" scheme="https://aike505.github.io/categories/Python/%E4%BA%8C%E7%BA%A7/"/>
    
    
    <category term="Python" scheme="https://aike505.github.io/tags/Python/"/>
    
    <category term="二级" scheme="https://aike505.github.io/tags/%E4%BA%8C%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>2.Python语言基本语法元素</title>
    <link href="https://aike505.github.io/2021/09/04/2-Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E5%85%83%E7%B4%A0/"/>
    <id>https://aike505.github.io/2021/09/04/2-Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E5%85%83%E7%B4%A0/</id>
    <published>2021-09-04T14:40:44.000Z</published>
    <updated>2021-09-24T02:54:12.058Z</updated>
    
    <content type="html"><![CDATA[<p>Python语言基本语法元素</p><span id="more"></span><h1 id="2-Python语言基本语法元素"><a href="#2-Python语言基本语法元素" class="headerlink" title="2.Python语言基本语法元素"></a>2.Python语言基本语法元素</h1><ul><li>思维导图<br><img src="https://cdn.jsdelivr.net/gh/Aike505/ImgHosting/Aike505-PIC/2021.9.5_2.Python%E8%AF%AD%E8%A8%80%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E5%85%83%E7%B4%A0.png"><blockquote><h2 id="考纲考点"><a href="#考纲考点" class="headerlink" title="考纲考点"></a>考纲考点</h2><p>程序的基本语法元素：程序的格式框架、缩进、注释、变量、命名、保留字、数据类型、赋值语句、引用<br><br><br>基本输入输出函数：input()、eval()、print()<br><br><br>源程序的书写风格</p></blockquote></li></ul><h2 id="2-1程序的格式"><a href="#2-1程序的格式" class="headerlink" title="2.1程序的格式"></a>2.1程序的格式</h2><h3 id="2-1-1缩进"><a href="#2-1-1缩进" class="headerlink" title="2.1.1缩进"></a>2.1.1缩进</h3><ul><li>Python语言采用严格的“缩进”来表明程序的格式框架。缩进指每一行代码开始前的空白区域，用来表示代码之间的包含和层次关系</li><li>1个缩进 = 4个空格</li><li>缩进是Python语言中表明程序框架的唯一手段<h3 id="2-1-2注释"><a href="#2-1-2注释" class="headerlink" title="2.1.2注释"></a>2.1.2注释</h3></li><li>注释是代码中的辅助性文字，会被编译或解释器略去，不被计算机执行，一般用于程序员对代码的说明。Python语言采用#表示一行注释的开始，<br>多行注释用’’’或”””将内容前后包含<h3 id="2-1-3续行符"><a href="#2-1-3续行符" class="headerlink" title="2.1.3续行符"></a>2.1.3续行符</h3></li><li>Python程序是逐行编写的，每行代码长度并无限制，但从程序员角度，单行代码太长并不利于阅读，因此，Python提供“续行符”将代码分割为多行表达。续行符由反斜杠()符号表达。</li></ul><h2 id="2-2语法元素的名称"><a href="#2-2语法元素的名称" class="headerlink" title="2.2语法元素的名称"></a>2.2语法元素的名称</h2><h3 id="2-2-1变量"><a href="#2-2-1变量" class="headerlink" title="2.2.1变量"></a>2.2.1变量</h3><ul><li>变量是保存和表示数据值的一种语法元素，在程序中十分常见。顾名思义，变量的值是可以改变的，能够通过赋值（使用等号=表达）方式被修改，例如：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a = 99</span><br><span class="line">&gt;&gt;&gt;a = a + 1</span><br><span class="line">&gt;&gt;&gt;print(a)</span><br><span class="line">100</span><br></pre></td></tr></table></figure><h3 id="2-2-2命名"><a href="#2-2-2命名" class="headerlink" title="2.2.2命名"></a>2.2.2命名</h3></li><li>Python语言允许采用大写字母、小写字母、数字、下划线(_)和汉字等字符及其组合给变量命名，但名字的首字符不能是数字，中间不能出现空格，长度没有限制</li><li>注意：<strong>标识符对大小写敏感</strong>，python和Python是两个不同的名字<h3 id="2-2-3保留字"><a href="#2-2-3保留字" class="headerlink" title="2.2.3保留字"></a>2.2.3保留字</h3></li><li>保留字，也称为关键字，指被编程语言内部定义并保留使用的标识符。</li><li>程序员编写程序不能定义与保留字相同的标识符。</li><li>每种程序设计语言都有一套保留字，保留字一般用来构成程序整体框架、表达关键值和具有结构性的复杂语义等。</li><li>掌握一门编程语言首先要熟记其所对应的保留字。</li><li> Python 3.x保留字列表 (33个)</li></ul><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>and</td><td>elif</td><td>import</td><td>raise</td></tr><tr><td>as</td><td>else</td><td>in</td><td>return</td></tr><tr><td>assert</td><td>except</td><td>is</td><td>try</td></tr><tr><td>break</td><td>finally</td><td>lambda</td><td>while</td></tr><tr><td>class</td><td>for</td><td>nonlocal</td><td>with</td></tr><tr><td>continue</td><td>from</td><td>not</td><td>yield</td></tr><tr><td>def</td><td>global</td><td>or</td><td>True</td></tr><tr><td>del</td><td>if</td><td>pass</td><td>False</td></tr><tr><td>None</td><td></td><td></td><td></td></tr></tbody></table><h3 id="2-2-4数据类型"><a href="#2-2-4数据类型" class="headerlink" title="2.2.4数据类型"></a>2.2.4数据类型</h3><ul><li>Python语言支持多种数据类型，最简单的包括数字类型、字符串类型，略微复杂的包括元组类型、集合类型、列表类型、字典类型等。<blockquote><p>数据类型各种编程语言大同小异，文章后面章节也会详细介绍，这里就不再赘述。</p></blockquote></li></ul><h2 id="2-3程序的语句元素"><a href="#2-3程序的语句元素" class="headerlink" title="2.3程序的语句元素"></a>2.3程序的语句元素</h2><h3 id="2-3-1表达式"><a href="#2-3-1表达式" class="headerlink" title="2.3.1表达式"></a>2.3.1表达式</h3><ul><li>产生或计算新数据值的代码片段称为表达式。表达式类似数学中的计算公式，以表达单一功能为目的，运算后产生运算结果，运算结果的类型由操作符或运算符决定。</li><li>表达式一般由数据和操作符等构成，这是构成Python语句的重要部分。<h3 id="2-3-2赋值语句"><a href="#2-3-2赋值语句" class="headerlink" title="2.3.2赋值语句"></a>2.3.2赋值语句</h3></li><li>Python语言中，= 表示“赋值”，即将等号右侧的值计算后将结果值赋给左侧变量，包含等号（=）的语句称为“赋值语句”<br><br><code>&lt;变量&gt; = &lt;表达式&gt;</code></li><li>同步赋值语句：同时给多个变量赋值<br><br><code>&lt;变量1&gt;, …, &lt;变量N&gt; = &lt;表达式1&gt;, …, &lt;表达式N&gt;</code><h3 id="2-3-3引用"><a href="#2-3-3引用" class="headerlink" title="2.3.3引用"></a>2.3.3引用</h3></li><li>Python程序会经常使用当前程序之外已有的功能代码，这个过程叫“引用”。Python语言使用import保留字引用当前程序以外的功能库，使用方式如下：<br><br><code>import &lt;功能库名称&gt;</code></li><li>引用功能库之后，采用<code>&lt;功能库名称&gt;.&lt;函数名称&gt;()</code>方式调用具体功能<h3 id="2-3-4其他语句"><a href="#2-3-4其他语句" class="headerlink" title="2.3.4其他语句"></a>2.3.4其他语句</h3></li><li>除了赋值语句外，Python程序还包括一些其他的语句类型，例如，分支语句和循环语句等。更多的分支和循环内容将在第4章介绍。这里不再赘述。<h2 id="2-4基本输入输出函数"><a href="#2-4基本输入输出函数" class="headerlink" title="2.4基本输入输出函数"></a>2.4基本输入输出函数</h2></li></ul><table><thead><tr><th>函数</th><th>语法</th><th>介绍</th></tr></thead><tbody><tr><td>input</td><td>&lt;变量&gt; = input(&lt;提示性文字&gt;</td><td>获得用户输入之前，input()函数可以包含一些提示性文字</td></tr><tr><td>eval</td><td>eval(&lt;字符串&gt;)</td><td>eval(&lt;字符串&gt;)函数是Python语言中一个十分重要的函数，它能够以Python表达式的方式解析并执行字符串，将返回结果输出</td></tr><tr><td>print()</td><td>1.print(&lt;待输出字符串&gt;)<br>2.print(&lt;变量1&gt;, &lt;变量2&gt;,…, &lt;变量n&gt;)<br>3.print(&lt;输出字符串模板&gt;.format(&lt;变量1&gt;, &lt;变量2&gt;,…, &lt;变量n&gt;))<br>4.print(&lt;待输出内容&gt;, end=”&lt;增加的输出结尾&gt;”)</td><td>1.仅用于输出字符串<br>2.仅用于输出一个或多个变量<br>3.用于混合输出字符串与变量值<br>4.对print()函数的end参数进行赋值</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;p&gt;Python语言基本语法元素&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://aike505.github.io/categories/Python/"/>
    
    <category term="二级" scheme="https://aike505.github.io/categories/Python/%E4%BA%8C%E7%BA%A7/"/>
    
    
    <category term="Python" scheme="https://aike505.github.io/tags/Python/"/>
    
    <category term="二级" scheme="https://aike505.github.io/tags/%E4%BA%8C%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>1.程序设计基本方法</title>
    <link href="https://aike505.github.io/2021/09/04/1-%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E6%9C%AC%E6%96%B9%E6%B3%95/"/>
    <id>https://aike505.github.io/2021/09/04/1-%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E6%9C%AC%E6%96%B9%E6%B3%95/</id>
    <published>2021-09-04T14:30:44.000Z</published>
    <updated>2021-09-06T06:21:07.279Z</updated>
    
    <content type="html"><![CDATA[<p>程序设计基本方法</p><span id="more"></span><h1 id="1-程序设计基本方法"><a href="#1-程序设计基本方法" class="headerlink" title="1.程序设计基本方法"></a>1.程序设计基本方法</h1><ul><li>思维导图<br><img src="https://cdn.jsdelivr.net/gh/Aike505/ImgHosting/Aike505-PIC/2021.9.5_1.%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E6%9C%AC%E6%96%B9%E6%B3%95.png"><h2 id="1-1高级编程语言两类执行机制"><a href="#1-1高级编程语言两类执行机制" class="headerlink" title="1.1高级编程语言两类执行机制"></a>1.1高级编程语言两类执行机制</h2>| 语言|执行机制 |示例|区别</li></ul><p>-|-|-|-<br>静态语言|编译执行|如C语言、Java语言|编译是一次性地翻译，一旦程序被编译，不再需要编译程序或者源代码。<br>脚本语言|解释执行|如Python语言、JavaScript语言、PHP语言|解释则在每次程序运行时都需要解释器和源代码。</p><ul><li><p>编译是将源代码转换成目标代码的过程，通常，<br>源代码是高级语言代码，目标代码是机器语言代<br>码，执行编译的计算机程序称为编译器<br><img src="https://cdn.jsdelivr.net/gh/Aike505/ImgHosting/Aike505-PIC/2021.9.5_1.%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E6%9C%AC%E6%96%B9%E6%B3%95_1.png"></p></li><li><p>解释是将源代码逐条转换成目标代码同时逐条运<br>行目标代码的过程。执行解释的计算机程序称为<br>解释器。<br><img src="https://cdn.jsdelivr.net/gh/Aike505/ImgHosting/Aike505-PIC/2021.9.5_1.%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E6%9C%AC%E6%96%B9%E6%B3%95_2.png"></p></li></ul><h2 id="1-2-Python解释器的两个重要工具"><a href="#1-2-Python解释器的两个重要工具" class="headerlink" title="1.2 Python解释器的两个重要工具"></a>1.2 Python解释器的两个重要工具</h2><p>IDLE：Python集成开发环境，用来编写和调试<br>Python代码；<br><br>Pip：Python第三方库安装工具，用来在当前计算<br>机上安装第三方库</p><blockquote><p>关于python的安装，发展历史，程序设计IPO方法，Pythond优缺点为避免繁琐，这里不予过多介绍，有问题的可以<strong>留言</strong>或自己百度解决~~</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;程序设计基本方法&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://aike505.github.io/categories/Python/"/>
    
    <category term="二级" scheme="https://aike505.github.io/categories/Python/%E4%BA%8C%E7%BA%A7/"/>
    
    
    <category term="Python" scheme="https://aike505.github.io/tags/Python/"/>
    
    <category term="二级" scheme="https://aike505.github.io/tags/%E4%BA%8C%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>C盘与D盘中间有个恢复分区，导致C盘不能扩展卷解决</title>
    <link href="https://aike505.github.io/2021/09/04/C%E7%9B%98%E4%B8%8ED%E7%9B%98%E4%B8%AD%E9%97%B4%E6%9C%89%E4%B8%AA%E6%81%A2%E5%A4%8D%E5%88%86%E5%8C%BA%EF%BC%8C%E5%AF%BC%E8%87%B4C%E7%9B%98%E4%B8%8D%E8%83%BD%E6%89%A9%E5%B1%95%E5%8D%B7%E8%A7%A3%E5%86%B3/"/>
    <id>https://aike505.github.io/2021/09/04/C%E7%9B%98%E4%B8%8ED%E7%9B%98%E4%B8%AD%E9%97%B4%E6%9C%89%E4%B8%AA%E6%81%A2%E5%A4%8D%E5%88%86%E5%8C%BA%EF%BC%8C%E5%AF%BC%E8%87%B4C%E7%9B%98%E4%B8%8D%E8%83%BD%E6%89%A9%E5%B1%95%E5%8D%B7%E8%A7%A3%E5%86%B3/</id>
    <published>2021-09-04T04:13:39.000Z</published>
    <updated>2021-09-06T05:55:41.768Z</updated>
    
    <content type="html"><![CDATA[<p>C盘与D盘中间有个恢复分区，导致C盘不能扩展卷解决</p><span id="more"></span><p>C盘还剩二十几个G可用内存，看着就难受，然后想着可以把D盘压缩卷出来点给C盘，压缩后发现D盘和C盘中间夹着个恢复分区，压缩出来的内存不在C盘旁边，所以C盘的扩展卷选项是灰色不能用的。</p><p>于是就在网上找一些相关问题，有的说要删除这个恢复分区，有的格式化重新建；我怎么看怎么不靠谱。于是在找解决方法中看到了一篇博客，用此方法可以移动各分区，然后C盘扩展完成</p><p>博客网址:<a href="https://blog.csdn.net/visual_eagle/article/details/106170969">https://blog.csdn.net/visual_eagle/article/details/106170969</a></p><p>成功帮助舍友解决</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;C盘与D盘中间有个恢复分区，导致C盘不能扩展卷解决&lt;/p&gt;</summary>
    
    
    
    <category term="电脑" scheme="https://aike505.github.io/categories/%E7%94%B5%E8%84%91/"/>
    
    
    <category term="电脑" scheme="https://aike505.github.io/tags/%E7%94%B5%E8%84%91/"/>
    
    <category term="磁盘" scheme="https://aike505.github.io/tags/%E7%A3%81%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>选课</title>
    <link href="https://aike505.github.io/2021/08/28/%E9%80%89%E8%AF%BE/"/>
    <id>https://aike505.github.io/2021/08/28/%E9%80%89%E8%AF%BE/</id>
    <published>2021-08-28T12:41:46.000Z</published>
    <updated>2021-09-07T05:03:49.223Z</updated>
    
    <content type="html"><![CDATA[<p>又是一年开学季，选课的日子又来了。</p><span id="more"></span><h2 id="1-选课"><a href="#1-选课" class="headerlink" title="1. 选课"></a>1. 选课</h2><p>这学期课程内容比较少，选修8门已经满了，课表如下：<br><img src="https://cdn.jsdelivr.net/gh/Aike505/ImgHosting/Aike505-PIC/2021.8.29_%E8%AF%BE%E8%A1%A8.png"></p><!-- 选修就只有[李伟](https://faculty.xidian.edu.cn/LW7/zh_CN/index.htm)老师的**数学建模**， --><p>学院选修在<strong>系统工程</strong>和<strong>经济法概论</strong>中选择了前者。<br><img src="https://cdn.jsdelivr.net/gh/Aike505/ImgHosting/Aike505-PIC/2021.8.29_%E9%80%89%E8%AF%BE1.png"><br><img src="https://cdn.jsdelivr.net/gh/Aike505/ImgHosting/Aike505-PIC/2021.8.29_%E9%80%89%E8%AF%BE2.png"><br>这学期学分一共就15.6分，严格说是15.55学分。<del>相比其他大院少了不止一点</del>。<br><img src="https://cdn.jsdelivr.net/gh/Aike505/ImgHosting/Aike505-PIC/2021.8.29_%E9%80%89%E8%AF%BE0.png"></p><h2 id="2-课程统计"><a href="#2-课程统计" class="headerlink" title="2. 课程统计"></a>2. 课程统计</h2><table><thead><tr><th>课程名称</th><th>课程类别</th><th>课程性质</th><th>开课单位</th><th>授课教师</th><th>学分</th></tr></thead><tbody><tr><td>概率论与数理统计</td><td>通识教育基础课</td><td>必修</td><td>数学与统计学院</td><td>赵彦</td><td>2.5</td></tr><tr><td>数据库原理与应用</td><td>大类基础课</td><td>必修</td><td>经济与管理学院</td><td><a href="https://faculty.xidian.edu.cn/yangzhaojun/zh_CN/index.htm">杨朝君</a></td><td>2</td></tr><tr><td>大学生职业发展</td><td>拓展提高</td><td>必修</td><td>本科生院</td><td>安翔</td><td>1</td></tr><tr><td>形势与政策(Ⅲ)</td><td>通识教育基础课</td><td>必修</td><td>马克思主义学院</td><td>樊稳</td><td>0.3</td></tr><tr><td>经管类学科导论(II)</td><td>通识教育核心课</td><td>必修</td><td>经济与管理学院</td><td><a href="https://faculty.xidian.edu.cn/CX5/zh_CN/index.htm">陈希</a>,<a href="https://faculty.xidian.edu.cn/SJ1/zh_CN/index.htm">尚娟</a></td><td>0.25</td></tr><tr><td>系统工程</td><td>大类基础课</td><td>学院选修（任选）</td><td>经济与管理学院</td><td><a href="https://faculty.xidian.edu.cn/LAJ/zh_CN/index.htm">刘爱军</a></td><td>2</td></tr><tr><td>大学英语中级(I)</td><td>通识教育基础课</td><td>必修</td><td>外国语学院</td><td>赵蓉</td><td>2</td></tr><tr><td>马克思主义基本原理</td><td>通识教育基础课</td><td>必修</td><td>马克思主义学院</td><td>刘向舒</td><td>3</td></tr><tr><td>大学体育(Ⅲ)</td><td>通识教育基础课</td><td>必修</td><td>体育部</td><td></td><td>0.5</td></tr><tr><td>运筹学</td><td>大类基础课</td><td>必修</td><td>经济与管理学院</td><td>赵彦</td><td>2</td></tr></tbody></table><!-- 数学建模|公共任选课|公共任选| |[李伟](https://faculty.xidian.edu.cn/LW7/zh_CN/index.htm)|1 -->]]></content>
    
    
    <summary type="html">&lt;p&gt;又是一年开学季，选课的日子又来了。&lt;/p&gt;</summary>
    
    
    
    <category term="大学生活" scheme="https://aike505.github.io/categories/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="选课" scheme="https://aike505.github.io/tags/%E9%80%89%E8%AF%BE/"/>
    
    <category term="大学生活" scheme="https://aike505.github.io/tags/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>8-18</title>
    <link href="https://aike505.github.io/2021/08/18/8-18/"/>
    <id>https://aike505.github.io/2021/08/18/8-18/</id>
    <published>2021-08-18T14:55:55.000Z</published>
    <updated>2021-09-06T05:52:09.695Z</updated>
    
    <content type="html"><![CDATA[<img src="https://cdn.jsdelivr.net/gh/Aike505/ImgHosting/Aike505-PIC/IMG_20210818_181936.jpg " width = "300"  height = "200"><span id="more"></span>>中午天热点了水，下午就间接性暴雨。人生第一次看见天空中彩虹，竟然是在驾校里。![](https://cdn.jsdelivr.net/gh/Aike505/ImgHosting/Aike505-PIC/IMG_20210818_181936.jpg)![](https://cdn.jsdelivr.net/gh/Aike505/ImgHosting/Aike505-PIC/IMG_20210818_173402.jpg)![](https://cdn.jsdelivr.net/gh/Aike505/ImgHosting/Aike505-PIC/IMG_20210818_120805.jpg)]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Aike505/ImgHosting/Aike505-PIC/IMG_20210818_181936.jpg &quot; width = &quot;300&quot;  height = &quot;200&quot;&gt;</summary>
    
    
    
    <category term="日常记录" scheme="https://aike505.github.io/categories/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="生活片段" scheme="https://aike505.github.io/tags/%E7%94%9F%E6%B4%BB%E7%89%87%E6%AE%B5/"/>
    
  </entry>
  
  <entry>
    <title>日常记录</title>
    <link href="https://aike505.github.io/2021/08/17/8-17/"/>
    <id>https://aike505.github.io/2021/08/17/8-17/</id>
    <published>2021-08-17T14:48:14.000Z</published>
    <updated>2021-09-06T05:52:05.496Z</updated>
    
    <content type="html"><![CDATA[<img src="https://cdn.jsdelivr.net/gh/Aike505/ImgHosting/Aike505-PIC/IMG_20210817_184214.jpg " width = "300"  height = "200"><span id="more"></span>>今天看完了《平凡的世界》第三部（*利用学驾校时间看的手机*），结尾虽然对孙少平的后来没有阐释，但说到还是归于平凡，意味深长。在文末摘抄几句点题的句子:>>* 平凡又平庸的我们努力奔向爱情。      >>* 在这平凡的世界里努力过好平凡的生活。>>* 我这个平凡的世界里平凡的人觉得遥不可及。<blockquote><p>同时，今天是keep打卡第一天 fighting~</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Aike505/ImgHosting/Aike505-PIC/IMG_20210817_184214.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Aike505/ImgHosting/Aike505-PIC/IMG_20210817_184214.jpg &quot; width = &quot;300&quot;  height = &quot;200&quot;&gt;</summary>
    
    
    
    <category term="日常记录" scheme="https://aike505.github.io/categories/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="生活片段" scheme="https://aike505.github.io/tags/%E7%94%9F%E6%B4%BB%E7%89%87%E6%AE%B5/"/>
    
  </entry>
  
  <entry>
    <title>日常记录</title>
    <link href="https://aike505.github.io/2021/08/16/8-16/"/>
    <id>https://aike505.github.io/2021/08/16/8-16/</id>
    <published>2021-08-16T14:45:39.000Z</published>
    <updated>2021-09-06T05:52:02.585Z</updated>
    
    <content type="html"><![CDATA[<img src="https://cdn.jsdelivr.net/gh/Aike505/ImgHosting/Aike505-PIC/20210815.jpg " width = "300"  height = "200"><span id="more"></span>> 一如既往的学驾校，一天四趟校车，学车的日子总不至于太单调。在等车的时间，没想到《平凡的世界》第3部都快看完了,感觉路遥笔下的悲喜事，自己从来不偏袒一方，正以**平凡**的口吻娓娓道来。学车的过程中也认识了一群伙伴，但碍于性格总交往不深。学车的地方云很近，是个抬头发呆的好去处>~<<p> <img src="https://cdn.jsdelivr.net/gh/Aike505/ImgHosting/Aike505-PIC/20210815.jpg"><img src="https://cdn.jsdelivr.net/gh/Aike505/ImgHosting/Aike505-PIC/20210814.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;img src=&quot;https://cdn.jsdelivr.net/gh/Aike505/ImgHosting/Aike505-PIC/20210815.jpg &quot; width = &quot;300&quot;  height = &quot;200&quot;&gt;</summary>
    
    
    
    <category term="日常记录" scheme="https://aike505.github.io/categories/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="生活片段" scheme="https://aike505.github.io/tags/%E7%94%9F%E6%B4%BB%E7%89%87%E6%AE%B5/"/>
    
  </entry>
  
  <entry>
    <title>hexo 新建分类和标签</title>
    <link href="https://aike505.github.io/2021/08/13/hexo-%E6%96%B0%E5%BB%BA%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE/"/>
    <id>https://aike505.github.io/2021/08/13/hexo-%E6%96%B0%E5%BB%BA%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE/</id>
    <published>2021-08-13T02:34:17.000Z</published>
    <updated>2021-09-07T06:29:58.821Z</updated>
    
    <content type="html"><![CDATA[<p>hexo 新建分类和标签</p><span id="more"></span><p>生成的新文件夹都在 source 下也就是和放文章的文件夹一块<br>以下所有命令都是在博客文件目录下执行</p><h2 id="1-创建“分类”选项"><a href="#1-创建“分类”选项" class="headerlink" title="1.创建“分类”选项"></a>1.创建“分类”选项</h2><p>生成“分类”页并添加 tpye 属性,进入博客目录。执行命令下方命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>categories 文件夹下会有 index.md 这个文件，打开后默认内容是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2019-04-24 15:30:30</span><br><span class="line">type: categories</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>保存并关闭文件。</p><p>给文章添加“categories”属性</p><p>打开需要添加分类的文章，为其添加 categories 属性。下方的 categories:Hexo 表示这篇文章添加到到“Hexo”这个分类。注意：一篇文章只会添加到一个分类中，如果是多个默认放到第一个分类中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: hexo 添加分类及标签</span><br><span class="line">date: 2017-05-26 12:12:57</span><br><span class="line">categories: Hexo</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了 categories: xxx 的文章才会被收录到首页的“分类”中。</p><h2 id="2-创建“标签”选项"><a href="#2-创建“标签”选项" class="headerlink" title="2.创建“标签”选项"></a>2.创建“标签”选项</h2><p>生成“标签”页并添加 tpye 属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>在 tags 文件夹下，找到 index.md 这个文件，打开后默认内容是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2019-04-22 14:22:08</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>添加 type: “tags”到内容中，添加后是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2019-04-24 15:40:24</span><br><span class="line">type: tags</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>保存并关闭文件。</p><p>给文章添加“tags”属性,打开需要添加标签的文章，为其添加 tags 属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo 添加分类及标签</span><br><span class="line">date: 2019-04-24 15:40:24</span><br><span class="line">categories:</span><br><span class="line">           - Hexo</span><br><span class="line">tags:</span><br><span class="line">           - 博客</span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;hexo 新建分类和标签&lt;/p&gt;</summary>
    
    
    
    <category term="hexo博客" scheme="https://aike505.github.io/categories/hexo%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="hexo" scheme="https://aike505.github.io/tags/hexo/"/>
    
    <category term="博客" scheme="https://aike505.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="新建分类标签" scheme="https://aike505.github.io/tags/%E6%96%B0%E5%BB%BA%E5%88%86%E7%B1%BB%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
</feed>
